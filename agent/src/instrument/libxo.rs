/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __clock_t = __int32_t;
pub type __critical_t = __int64_t;
pub type __double_t = ::std::os::raw::c_double;
pub type __float_t = ::std::os::raw::c_float;
pub type __intfptr_t = __int64_t;
pub type __intptr_t = __int64_t;
pub type __intmax_t = __int64_t;
pub type __int_fast8_t = __int32_t;
pub type __int_fast16_t = __int32_t;
pub type __int_fast32_t = __int32_t;
pub type __int_fast64_t = __int64_t;
pub type __int_least8_t = __int8_t;
pub type __int_least16_t = __int16_t;
pub type __int_least32_t = __int32_t;
pub type __int_least64_t = __int64_t;
pub type __ptrdiff_t = __int64_t;
pub type __register_t = __int64_t;
pub type __segsz_t = __int64_t;
pub type __size_t = __uint64_t;
pub type __ssize_t = __int64_t;
pub type __time_t = __int64_t;
pub type __uintfptr_t = __uint64_t;
pub type __uintptr_t = __uint64_t;
pub type __uintmax_t = __uint64_t;
pub type __uint_fast8_t = __uint32_t;
pub type __uint_fast16_t = __uint32_t;
pub type __uint_fast32_t = __uint32_t;
pub type __uint_fast64_t = __uint64_t;
pub type __uint_least8_t = __uint8_t;
pub type __uint_least16_t = __uint16_t;
pub type __uint_least32_t = __uint32_t;
pub type __uint_least64_t = __uint64_t;
pub type __u_register_t = __uint64_t;
pub type __vm_offset_t = __uint64_t;
pub type __vm_paddr_t = __uint64_t;
pub type __vm_size_t = __uint64_t;
pub type __vm_ooffset_t = __int64_t;
pub type __vm_pindex_t = __uint64_t;
pub type ___wchar_t = ::std::os::raw::c_int;
pub type __va_list = __builtin_va_list;
pub type __gnuc_va_list = __va_list;
pub type __blksize_t = __int32_t;
pub type __blkcnt_t = __int64_t;
pub type __clockid_t = __int32_t;
pub type __fflags_t = __uint32_t;
pub type __fsblkcnt_t = __uint64_t;
pub type __fsfilcnt_t = __uint64_t;
pub type __gid_t = __uint32_t;
pub type __id_t = __int64_t;
pub type __ino_t = __uint32_t;
pub type __key_t = ::std::os::raw::c_long;
pub type __lwpid_t = __int32_t;
pub type __mode_t = __uint16_t;
pub type __accmode_t = ::std::os::raw::c_int;
pub type __nl_item = ::std::os::raw::c_int;
pub type __nlink_t = __uint16_t;
pub type __off_t = __int64_t;
pub type __pid_t = __int32_t;
pub type __rlim_t = __int64_t;
pub type __sa_family_t = __uint8_t;
pub type __socklen_t = __uint32_t;
pub type __suseconds_t = ::std::os::raw::c_long;
pub enum __timer { }
pub type __timer_t = *mut __timer;
pub enum __mq { }
pub type __mqd_t = *mut __mq;
pub type __uid_t = __uint32_t;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __cpuwhich_t = ::std::os::raw::c_int;
pub type __cpulevel_t = ::std::os::raw::c_int;
pub type __cpusetid_t = ::std::os::raw::c_int;
pub type __ct_rune_t = ::std::os::raw::c_int;
pub type __rune_t = __ct_rune_t;
pub type __wint_t = __ct_rune_t;
pub type __char16_t = __uint_least16_t;
pub type __char32_t = __uint_least32_t;
pub type __dev_t = __uint32_t;
pub type __fixpt_t = __uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct __mbstate_t {
    pub _bindgen_data_: [u64; 16usize],
}
impl __mbstate_t {
    pub unsafe fn __mbstate8(&mut self)
     -> *mut [::std::os::raw::c_char; 128usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _mbstateL(&mut self) -> *mut __int64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for __mbstate_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for __mbstate_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __rman_res_t = ::std::os::raw::c_ulong;
pub type fpos_t = __off_t;
pub type size_t = usize;
pub type off_t = __off_t;
pub type ssize_t = isize;
pub type va_list = __va_list;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for __sbuf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum pthread_mutex { }
pub enum pthread { }
#[repr(C)]
#[derive(Copy, Clone)]
//#[derive(Debug)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                               *mut ::std::os::raw::c_void)
                                          -> ::std::os::raw::c_int>,
    pub _read: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut ::std::os::raw::c_void,
                                                          arg2:
                                                              *mut ::std::os::raw::c_char,
                                                          arg3:
                                                              ::std::os::raw::c_int)
                                         -> ::std::os::raw::c_int>,
    pub _seek: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut ::std::os::raw::c_void,
                                                          arg2: fpos_t,
                                                          arg3:
                                                              ::std::os::raw::c_int)
                                         -> fpos_t>,
    pub _write: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                               *mut ::std::os::raw::c_void,
                                                           arg2:
                                                               *const ::std::os::raw::c_char,
                                                           arg3:
                                                               ::std::os::raw::c_int)
                                          -> ::std::os::raw::c_int>,
    pub _ub: __sbuf,
    pub _up: *mut ::std::os::raw::c_uchar,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
    pub _fl_mutex: *mut pthread_mutex,
    pub _fl_owner: *mut pthread,
    pub _fl_count: ::std::os::raw::c_int,
    pub _orientation: ::std::os::raw::c_int,
    pub _mbstate: __mbstate_t,
    pub _flags2: ::std::os::raw::c_int,
}
impl ::std::default::Default for __sFILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type FILE = __sFILE;
pub enum pthread_attr { }
pub enum pthread_cond { }
pub enum pthread_cond_attr { }
pub enum pthread_mutex_attr { }
pub enum pthread_rwlock { }
pub enum pthread_rwlockattr { }
pub enum pthread_barrier { }
pub enum pthread_barrier_attr { }
pub enum pthread_spinlock { }
pub type pthread_t = *mut pthread;
pub type pthread_attr_t = *mut pthread_attr;
pub type pthread_mutex_t = *mut pthread_mutex;
pub type pthread_mutexattr_t = *mut pthread_mutex_attr;
pub type pthread_cond_t = *mut pthread_cond;
pub type pthread_condattr_t = *mut pthread_cond_attr;
pub type pthread_key_t = ::std::os::raw::c_int;
pub type pthread_once_t = pthread_once;
pub type pthread_rwlock_t = *mut pthread_rwlock;
pub type pthread_rwlockattr_t = *mut pthread_rwlockattr;
pub type pthread_barrier_t = *mut pthread_barrier;
pub enum pthread_barrierattr { }
pub type pthread_barrierattr_t = *mut pthread_barrierattr;
pub type pthread_spinlock_t = *mut pthread_spinlock;
pub type pthread_addr_t = *mut ::std::os::raw::c_void;
pub type pthread_startroutine_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_void)
                              -> *mut ::std::os::raw::c_void>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_once {
    pub state: ::std::os::raw::c_int,
    pub mutex: pthread_mutex_t,
}
impl ::std::default::Default for pthread_once {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint_ = ::std::os::raw::c_uint;
pub type int8_t = i8;
pub type int16_t = i16;
pub type int32_t = i32;
pub type int64_t = i64;
pub type uint8_t = u8;
pub type uint16_t = u16;
pub type uint32_t = u32;
pub type uint64_t = u64;
pub type intptr_t = isize;
pub type uintptr_t = usize;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type u_quad_t = __uint64_t;
pub type quad_t = __int64_t;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type c_caddr_t = *const ::std::os::raw::c_char;
pub type blksize_t = __blksize_t;
pub type cpuwhich_t = __cpuwhich_t;
pub type cpulevel_t = __cpulevel_t;
pub type cpusetid_t = __cpusetid_t;
pub type blkcnt_t = __blkcnt_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type critical_t = __critical_t;
pub type daddr_t = __int64_t;
pub type dev_t = __dev_t;
pub type fflags_t = __fflags_t;
pub type fixpt_t = __fixpt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type gid_t = __gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type id_t = __id_t;
pub type ino_t = __ino_t;
pub type key_t = __key_t;
pub type lwpid_t = __lwpid_t;
pub type mode_t = __mode_t;
pub type accmode_t = __accmode_t;
pub type nlink_t = __nlink_t;
pub type pid_t = __pid_t;
pub type register_t = __register_t;
pub type rlim_t = __rlim_t;
pub type sbintime_t = __int64_t;
pub type segsz_t = __segsz_t;
pub type suseconds_t = __suseconds_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type mqd_t = __mqd_t;
pub type u_register_t = __u_register_t;
pub type uid_t = __uid_t;
pub type useconds_t = __useconds_t;
pub type cap_ioctl_t = ::std::os::raw::c_ulong;
pub enum cap_rights { }
pub type cap_rights_t = cap_rights;
pub type vm_offset_t = __vm_offset_t;
pub type vm_ooffset_t = __vm_ooffset_t;
pub type vm_paddr_t = __vm_paddr_t;
pub type vm_pindex_t = __vm_pindex_t;
pub type vm_size_t = __vm_size_t;
pub type rman_res_t = __rman_res_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __sigset {
    pub __bits: [__uint32_t; 4usize],
}
impl ::std::default::Default for __sigset {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __sigset_t = __sigset;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timeval {
    pub tv_sec: time_t,
    pub tv_usec: suseconds_t,
}
impl ::std::default::Default for timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timespec {
    pub tv_sec: time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
impl ::std::default::Default for timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
impl ::std::default::Default for itimerspec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __fd_mask = ::std::os::raw::c_ulong;
pub type fd_mask = __fd_mask;
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
impl ::std::default::Default for fd_set {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rune_t = __rune_t;
pub type wchar_t = ___wchar_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
impl ::std::default::Default for div_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
impl ::std::default::Default for ldiv_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
impl ::std::default::Default for lldiv_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xo_style_t = ::std::os::raw::c_ushort;
pub type xo_xof_flags_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct xo_info_s {
    pub xi_name: *const ::std::os::raw::c_char,
    pub xi_type: *const ::std::os::raw::c_char,
    pub xi_help: *const ::std::os::raw::c_char,
}
impl ::std::default::Default for xo_info_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xo_info_t = xo_info_s;
pub enum xo_handle_s { }
pub type xo_handle_t = xo_handle_s;
pub type xo_write_func_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_void,
                                               arg2:
                                                   *const ::std::os::raw::c_char)
                              -> ::std::os::raw::c_int>;
pub type xo_close_func_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_void)>;
pub type xo_flush_func_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type xo_realloc_func_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_void,
                                               arg2: size_t)
                              -> *mut ::std::os::raw::c_void>;
pub type xo_free_func_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_void)>;
pub type xo_formatter_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut xo_handle_t,
                                               arg2:
                                                   *mut ::std::os::raw::c_char,
                                               arg3: ::std::os::raw::c_int,
                                               arg4:
                                                   *const ::std::os::raw::c_char,
                                               arg5: va_list)
                              -> ::std::os::raw::c_int>;
pub type xo_checkpointer_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut xo_handle_t,
                                               arg2: va_list,
                                               arg3: ::std::os::raw::c_int)>;
pub type xo_syslog_open_t = ::std::option::Option<extern "C" fn()>;
pub type xo_syslog_send_t =
    ::std::option::Option<unsafe extern "C" fn(full_msg:
                                                   *const ::std::os::raw::c_char,
                                               v0_hdr:
                                                   *const ::std::os::raw::c_char,
                                               text_only:
                                                   *const ::std::os::raw::c_char)>;
pub type xo_syslog_close_t = ::std::option::Option<extern "C" fn()>;
pub type xo_simplify_field_func_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *const ::std::os::raw::c_char,
                                               arg2: ::std::os::raw::c_uint,
                                               arg3: ::std::os::raw::c_int)>;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for __va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static mut __stdinp: *mut FILE;
    pub static mut __stdoutp: *mut FILE;
    pub static mut __stderrp: *mut FILE;
    pub static sys_nerr: ::std::os::raw::c_int;
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
    pub static mut __isthreaded: ::std::os::raw::c_int;
    pub static mut __mb_cur_max: ::std::os::raw::c_int;
    pub static mut malloc_conf: *const ::std::os::raw::c_char;
    pub static mut malloc_message:
               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut ::std::os::raw::c_void,
                                                          arg2:
                                                              *const ::std::os::raw::c_char)>;
    pub static mut suboptarg: *mut ::std::os::raw::c_char;
    pub static mut xo_version: [::std::os::raw::c_char; 0usize];
    pub static mut xo_version_extra: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t)
     -> ::std::os::raw::c_int;
    pub fn fgets(arg1: *mut ::std::os::raw::c_char,
                 arg2: ::std::os::raw::c_int, arg3: *mut FILE)
     -> *mut ::std::os::raw::c_char;
    pub fn fopen(arg1: *const ::std::os::raw::c_char,
                 arg2: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn fprintf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fread(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                 arg3: size_t, arg4: *mut FILE) -> size_t;
    pub fn freopen(arg1: *const ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, arg3: *mut FILE)
     -> *mut FILE;
    pub fn fscanf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn fseek(arg1: *mut FILE, arg2: ::std::os::raw::c_long,
                 arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t)
     -> ::std::os::raw::c_int;
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
    pub fn fwrite(arg1: *const ::std::os::raw::c_void, arg2: size_t,
                  arg3: size_t, arg4: *mut FILE) -> size_t;
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar() -> ::std::os::raw::c_int;
    pub fn gets(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn perror(arg1: *const ::std::os::raw::c_char);
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn remove(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rename(arg1: *const ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rewind(arg1: *mut FILE);
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
    pub fn setvbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char,
                   arg3: ::std::os::raw::c_int, arg4: size_t)
     -> ::std::os::raw::c_int;
    pub fn sprintf(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sscanf(arg1: *const ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn vfprintf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char,
                    arg3: __va_list) -> ::std::os::raw::c_int;
    pub fn vprintf(arg1: *const ::std::os::raw::c_char, arg2: __va_list)
     -> ::std::os::raw::c_int;
    pub fn vsprintf(arg1: *mut ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char, arg3: __va_list)
     -> ::std::os::raw::c_int;
    pub fn snprintf(arg1: *mut ::std::os::raw::c_char, arg2: size_t,
                    arg3: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfscanf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char,
                   arg3: __va_list) -> ::std::os::raw::c_int;
    pub fn vscanf(arg1: *const ::std::os::raw::c_char, arg2: __va_list)
     -> ::std::os::raw::c_int;
    pub fn vsnprintf(arg1: *mut ::std::os::raw::c_char, arg2: size_t,
                     arg3: *const ::std::os::raw::c_char, arg4: __va_list)
     -> ::std::os::raw::c_int;
    pub fn vsscanf(arg1: *const ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, arg3: __va_list)
     -> ::std::os::raw::c_int;
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn fdopen(arg1: ::std::os::raw::c_int,
                  arg2: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn popen(arg1: *const ::std::os::raw::c_char,
                 arg2: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn flockfile(arg1: *mut FILE);
    pub fn funlockfile(arg1: *mut FILE);
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn clearerr_unlocked(arg1: *mut FILE);
    pub fn feof_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fileno_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fseeko(arg1: *mut FILE, arg2: __off_t, arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ftello(arg1: *mut FILE) -> __off_t;
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn tempnam(arg1: *const ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn fmemopen(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                    arg3: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn getdelim(arg1: *mut *mut ::std::os::raw::c_char, arg2: *mut size_t,
                    arg3: ::std::os::raw::c_int, arg4: *mut FILE) -> ssize_t;
    pub fn open_memstream(arg1: *mut *mut ::std::os::raw::c_char,
                          arg2: *mut size_t) -> *mut FILE;
    pub fn renameat(arg1: ::std::os::raw::c_int,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int,
                    arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn vdprintf(arg1: ::std::os::raw::c_int,
                    arg2: *const ::std::os::raw::c_char, arg3: __va_list)
     -> ::std::os::raw::c_int;
    pub fn asprintf(arg1: *mut *mut ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn fcloseall();
    pub fn fdclose(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn fgetln(arg1: *mut FILE, arg2: *mut size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn fmtcheck(arg1: *const ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn setbuffer(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char,
                     arg3: ::std::os::raw::c_int);
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn vasprintf(arg1: *mut *mut ::std::os::raw::c_char,
                     arg2: *const ::std::os::raw::c_char, arg3: __va_list)
     -> ::std::os::raw::c_int;
    pub fn funopen(arg1: *const ::std::os::raw::c_void,
                   arg2:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *mut ::std::os::raw::c_char,
                                                                  arg3:
                                                                      ::std::os::raw::c_int)
                                                 -> ::std::os::raw::c_int>,
                   arg3:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *const ::std::os::raw::c_char,
                                                                  arg3:
                                                                      ::std::os::raw::c_int)
                                                 -> ::std::os::raw::c_int>,
                   arg4:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      fpos_t,
                                                                  arg3:
                                                                      ::std::os::raw::c_int)
                                                 -> fpos_t>,
                   arg5:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>)
     -> *mut FILE;
    pub fn ftruncate(arg1: ::std::os::raw::c_int, arg2: __off_t)
     -> ::std::os::raw::c_int;
    pub fn lseek(arg1: ::std::os::raw::c_int, arg2: __off_t,
                 arg3: ::std::os::raw::c_int) -> __off_t;
    pub fn mmap(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                arg3: ::std::os::raw::c_int, arg4: ::std::os::raw::c_int,
                arg5: ::std::os::raw::c_int, arg6: __off_t)
     -> *mut ::std::os::raw::c_void;
    pub fn truncate(arg1: *const ::std::os::raw::c_char, arg2: __off_t)
     -> ::std::os::raw::c_int;
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn pselect(arg1: ::std::os::raw::c_int, arg2: *mut fd_set,
                   arg3: *mut fd_set, arg4: *mut fd_set,
                   arg5: *const timespec, arg6: *const sigset_t)
     -> ::std::os::raw::c_int;
    pub fn select(arg1: ::std::os::raw::c_int, arg2: *mut fd_set,
                  arg3: *mut fd_set, arg4: *mut fd_set, arg5: *mut timeval)
     -> ::std::os::raw::c_int;
    pub fn ___mb_cur_max() -> ::std::os::raw::c_int;
    pub fn abort();
    pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn atexit(arg1: ::std::option::Option<extern "C" fn()>)
     -> ::std::os::raw::c_int;
    pub fn atof(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn atol(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
    pub fn bsearch(arg1: *const ::std::os::raw::c_void,
                   arg2: *const ::std::os::raw::c_void, arg3: size_t,
                   arg4: size_t,
                   arg5:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *const ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *const ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>)
     -> *mut ::std::os::raw::c_void;
    pub fn calloc(arg1: size_t, arg2: size_t) -> *mut ::std::os::raw::c_void;
    pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
     -> div_t;
    pub fn exit(arg1: ::std::os::raw::c_int);
    pub fn free(arg1: *mut ::std::os::raw::c_void);
    pub fn getenv(arg1: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
    pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long)
     -> ldiv_t;
    pub fn malloc(arg1: size_t) -> *mut ::std::os::raw::c_void;
    pub fn mblen(arg1: *const ::std::os::raw::c_char, arg2: size_t)
     -> ::std::os::raw::c_int;
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char,
                    arg3: size_t) -> size_t;
    pub fn mbtowc(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char,
                  arg3: size_t) -> ::std::os::raw::c_int;
    pub fn qsort(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                 arg3: size_t,
                 arg4:
                     ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *const ::std::os::raw::c_void,
                                                                arg2:
                                                                    *const ::std::os::raw::c_void)
                                               -> ::std::os::raw::c_int>);
    pub fn rand() -> ::std::os::raw::c_int;
    pub fn realloc(arg1: *mut ::std::os::raw::c_void, arg2: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn srand(arg1: ::std::os::raw::c_uint);
    pub fn strtod(arg1: *const ::std::os::raw::c_char,
                  arg2: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn strtof(arg1: *const ::std::os::raw::c_char,
                  arg2: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_float;
    pub fn strtol(arg1: *const ::std::os::raw::c_char,
                  arg2: *mut *mut ::std::os::raw::c_char,
                  arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
    pub fn strtold(arg1: *const ::std::os::raw::c_char,
                   arg2: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn strtoul(arg1: *const ::std::os::raw::c_char,
                   arg2: *mut *mut ::std::os::raw::c_char,
                   arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
    pub fn system(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t)
     -> ::std::os::raw::c_int;
    pub fn wcstombs(arg1: *mut ::std::os::raw::c_char, arg2: *const wchar_t,
                    arg3: size_t) -> size_t;
    pub fn atoll(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_longlong;
    pub fn llabs(arg1: ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_longlong;
    pub fn lldiv(arg1: ::std::os::raw::c_longlong,
                 arg2: ::std::os::raw::c_longlong) -> lldiv_t;
    pub fn strtoll(arg1: *const ::std::os::raw::c_char,
                   arg2: *mut *mut ::std::os::raw::c_char,
                   arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_longlong;
    pub fn strtoull(arg1: *const ::std::os::raw::c_char,
                    arg2: *mut *mut ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
    pub fn _Exit(arg1: ::std::os::raw::c_int);
    pub fn aligned_alloc(arg1: size_t, arg2: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn at_quick_exit(arg1: ::std::option::Option<extern "C" fn()>)
     -> ::std::os::raw::c_int;
    pub fn quick_exit(arg1: ::std::os::raw::c_int);
    pub fn realpath(arg1: *const ::std::os::raw::c_char,
                    arg2: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
    pub fn posix_memalign(arg1: *mut *mut ::std::os::raw::c_void,
                          arg2: size_t, arg3: size_t)
     -> ::std::os::raw::c_int;
    pub fn setenv(arg1: *const ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char,
                  arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn unsetenv(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn getsubopt(arg1: *mut *mut ::std::os::raw::c_char,
                     arg2: *const *mut ::std::os::raw::c_char,
                     arg3: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn mkdtemp(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn a64l(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
    pub fn drand48() -> ::std::os::raw::c_double;
    pub fn erand48(arg1: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_double;
    pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn initstate(arg1: ::std::os::raw::c_ulong,
                     arg2: *mut ::std::os::raw::c_char,
                     arg3: ::std::os::raw::c_long)
     -> *mut ::std::os::raw::c_char;
    pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
    pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
    pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
    pub fn lrand48() -> ::std::os::raw::c_long;
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn mrand48() -> ::std::os::raw::c_long;
    pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
    pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ptsname(arg1: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn random() -> ::std::os::raw::c_long;
    pub fn seed48(arg1: *mut ::std::os::raw::c_ushort)
     -> *mut ::std::os::raw::c_ushort;
    pub fn setkey(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn setstate(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn srand48(arg1: ::std::os::raw::c_long);
    pub fn srandom(arg1: ::std::os::raw::c_ulong);
    pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn abort2(arg1: *const ::std::os::raw::c_char,
                  arg2: ::std::os::raw::c_int,
                  arg3: *mut *mut ::std::os::raw::c_void);
    pub fn arc4random() -> __uint32_t;
    pub fn arc4random_addrandom(arg1: *mut ::std::os::raw::c_uchar,
                                arg2: ::std::os::raw::c_int);
    pub fn arc4random_buf(arg1: *mut ::std::os::raw::c_void, arg2: size_t);
    pub fn arc4random_stir();
    pub fn arc4random_uniform(arg1: __uint32_t) -> __uint32_t;
    pub fn getbsize(arg1: *mut ::std::os::raw::c_int,
                    arg2: *mut ::std::os::raw::c_long)
     -> *mut ::std::os::raw::c_char;
    pub fn cgetcap(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char,
                   arg3: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn cgetclose() -> ::std::os::raw::c_int;
    pub fn cgetent(arg1: *mut *mut ::std::os::raw::c_char,
                   arg2: *mut *mut ::std::os::raw::c_char,
                   arg3: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn cgetfirst(arg1: *mut *mut ::std::os::raw::c_char,
                     arg2: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn cgetmatch(arg1: *const ::std::os::raw::c_char,
                     arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn cgetnext(arg1: *mut *mut ::std::os::raw::c_char,
                    arg2: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn cgetnum(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char,
                   arg3: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn cgetset(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn cgetstr(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char,
                   arg3: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn cgetustr(arg1: *mut ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn daemon(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn devname(arg1: __dev_t, arg2: __mode_t)
     -> *mut ::std::os::raw::c_char;
    pub fn devname_r(arg1: __dev_t, arg2: __mode_t,
                     arg3: *mut ::std::os::raw::c_char,
                     arg4: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn fdevname(arg1: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn fdevname_r(arg1: ::std::os::raw::c_int,
                      arg2: *mut ::std::os::raw::c_char,
                      arg3: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn getloadavg(arg1: *mut ::std::os::raw::c_double,
                      arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn getprogname() -> *const ::std::os::raw::c_char;
    pub fn heapsort(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                    arg3: size_t,
                    arg4:
                        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *const ::std::os::raw::c_void,
                                                                   arg2:
                                                                       *const ::std::os::raw::c_void)
                                                  -> ::std::os::raw::c_int>)
     -> ::std::os::raw::c_int;
    pub fn l64a_r(arg1: ::std::os::raw::c_long,
                  arg2: *mut ::std::os::raw::c_char,
                  arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn mergesort(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                     arg3: size_t,
                     arg4:
                         ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *const ::std::os::raw::c_void,
                                                                    arg2:
                                                                        *const ::std::os::raw::c_void)
                                                   -> ::std::os::raw::c_int>)
     -> ::std::os::raw::c_int;
    pub fn mkostemp(arg1: *mut ::std::os::raw::c_char,
                    arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn mkostemps(arg1: *mut ::std::os::raw::c_char,
                     arg2: ::std::os::raw::c_int, arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn qsort_r(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                   arg3: size_t, arg4: *mut ::std::os::raw::c_void,
                   arg5:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *const ::std::os::raw::c_void,
                                                                  arg3:
                                                                      *const ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>);
    pub fn radixsort(arg1: *mut *const ::std::os::raw::c_uchar,
                     arg2: ::std::os::raw::c_int,
                     arg3: *const ::std::os::raw::c_uchar,
                     arg4: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
    pub fn reallocarray(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                        arg3: size_t) -> *mut ::std::os::raw::c_void;
    pub fn reallocf(arg1: *mut ::std::os::raw::c_void, arg2: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn rpmatch(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn setprogname(arg1: *const ::std::os::raw::c_char);
    pub fn sradixsort(arg1: *mut *const ::std::os::raw::c_uchar,
                      arg2: ::std::os::raw::c_int,
                      arg3: *const ::std::os::raw::c_uchar,
                      arg4: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
    pub fn sranddev();
    pub fn srandomdev();
    pub fn strtonum(arg1: *const ::std::os::raw::c_char,
                    arg2: ::std::os::raw::c_longlong,
                    arg3: ::std::os::raw::c_longlong,
                    arg4: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_longlong;
    pub fn strtoq(arg1: *const ::std::os::raw::c_char,
                  arg2: *mut *mut ::std::os::raw::c_char,
                  arg3: ::std::os::raw::c_int) -> __int64_t;
    pub fn strtouq(arg1: *const ::std::os::raw::c_char,
                   arg2: *mut *mut ::std::os::raw::c_char,
                   arg3: ::std::os::raw::c_int) -> __uint64_t;
    pub fn __error() -> *mut ::std::os::raw::c_int;
    pub fn xo_create(style: xo_style_t, flags: xo_xof_flags_t)
     -> *mut xo_handle_t;
    pub fn xo_create_to_file(fp: *mut FILE, style: xo_style_t,
                             flags: xo_xof_flags_t) -> *mut xo_handle_t;
    pub fn xo_set_file(fp: *mut FILE) -> ::std::os::raw::c_int;
    pub fn xo_destroy(xop: *mut xo_handle_t);
    pub fn xo_set_writer(xop: *mut xo_handle_t,
                         opaque: *mut ::std::os::raw::c_void,
                         write_func: xo_write_func_t,
                         close_func: xo_close_func_t,
                         flush_func: xo_flush_func_t);
    pub fn xo_set_allocator(realloc_func: xo_realloc_func_t,
                            free_func: xo_free_func_t);
    pub fn xo_set_style(xop: *mut xo_handle_t, style: xo_style_t);
    pub fn xo_get_style(xop: *mut xo_handle_t) -> xo_style_t;
    pub fn xo_set_style_name(xop: *mut xo_handle_t,
                             style: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn xo_set_options(xop: *mut xo_handle_t,
                          input: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn xo_get_flags(xop: *mut xo_handle_t) -> xo_xof_flags_t;
    pub fn xo_set_flags(xop: *mut xo_handle_t, flags: xo_xof_flags_t);
    pub fn xo_clear_flags(xop: *mut xo_handle_t, flags: xo_xof_flags_t);
    pub fn xo_set_info(xop: *mut xo_handle_t, infop: *mut xo_info_t,
                       count: ::std::os::raw::c_int);
    pub fn xo_set_formatter(xop: *mut xo_handle_t, func: xo_formatter_t,
                            arg1: xo_checkpointer_t);
    pub fn xo_set_depth(xop: *mut xo_handle_t, depth: ::std::os::raw::c_int);
    pub fn xo_emit_hv(xop: *mut xo_handle_t,
                      fmt: *const ::std::os::raw::c_char, vap: va_list)
     -> ::std::os::raw::c_int;
    pub fn xo_emit_h(xop: *mut xo_handle_t,
                     fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn xo_emit(fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn xo_open_container_h(xop: *mut xo_handle_t,
                               name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn xo_open_container(name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn xo_open_container_hd(xop: *mut xo_handle_t,
                                name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn xo_open_container_d(name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn xo_close_container_h(xop: *mut xo_handle_t,
                                name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn xo_close_container(name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn xo_close_container_hd(xop: *mut xo_handle_t)
     -> ::std::os::raw::c_int;
    pub fn xo_close_container_d() -> ::std::os::raw::c_int;
    pub fn xo_open_list_h(xop: *mut xo_handle_t,
                          name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn xo_open_list(name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn xo_open_list_hd(xop: *mut xo_handle_t,
                           name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn xo_open_list_d(name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn xo_close_list_h(xop: *mut xo_handle_t,
                           name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn xo_close_list(name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn xo_close_list_hd(xop: *mut xo_handle_t) -> ::std::os::raw::c_int;
    pub fn xo_close_list_d() -> ::std::os::raw::c_int;
    pub fn xo_open_instance_h(xop: *mut xo_handle_t,
                              name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn xo_open_instance(name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn xo_open_instance_hd(xop: *mut xo_handle_t,
                               name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn xo_open_instance_d(name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn xo_close_instance_h(xop: *mut xo_handle_t,
                               name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn xo_close_instance(name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn xo_close_instance_hd(xop: *mut xo_handle_t)
     -> ::std::os::raw::c_int;
    pub fn xo_close_instance_d() -> ::std::os::raw::c_int;
    pub fn xo_open_marker_h(xop: *mut xo_handle_t,
                            name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn xo_open_marker(name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn xo_close_marker_h(xop: *mut xo_handle_t,
                             name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn xo_close_marker(name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn xo_attr_h(xop: *mut xo_handle_t,
                     name: *const ::std::os::raw::c_char,
                     fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn xo_attr_hv(xop: *mut xo_handle_t,
                      name: *const ::std::os::raw::c_char,
                      fmt: *const ::std::os::raw::c_char, vap: va_list)
     -> ::std::os::raw::c_int;
    pub fn xo_attr(name: *const ::std::os::raw::c_char,
                   fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn xo_error_hv(xop: *mut xo_handle_t,
                       fmt: *const ::std::os::raw::c_char, vap: va_list);
    pub fn xo_error_h(xop: *mut xo_handle_t,
                      fmt: *const ::std::os::raw::c_char, ...);
    pub fn xo_error(fmt: *const ::std::os::raw::c_char, ...);
    pub fn xo_flush_h(xop: *mut xo_handle_t) -> ::std::os::raw::c_int;
    pub fn xo_flush() -> ::std::os::raw::c_int;
    pub fn xo_finish_h(xop: *mut xo_handle_t) -> ::std::os::raw::c_int;
    pub fn xo_finish() -> ::std::os::raw::c_int;
    pub fn xo_finish_atexit();
    pub fn xo_set_leading_xpath(xop: *mut xo_handle_t,
                                path: *const ::std::os::raw::c_char);
    pub fn xo_warn_hc(xop: *mut xo_handle_t, code: ::std::os::raw::c_int,
                      fmt: *const ::std::os::raw::c_char, ...);
    pub fn xo_warn_c(code: ::std::os::raw::c_int,
                     fmt: *const ::std::os::raw::c_char, ...);
    pub fn xo_warn(fmt: *const ::std::os::raw::c_char, ...);
    pub fn xo_warnx(fmt: *const ::std::os::raw::c_char, ...);
    pub fn xo_err(eval: ::std::os::raw::c_int,
                  fmt: *const ::std::os::raw::c_char, ...);
    pub fn xo_errx(eval: ::std::os::raw::c_int,
                   fmt: *const ::std::os::raw::c_char, ...);
    pub fn xo_errc(eval: ::std::os::raw::c_int, code: ::std::os::raw::c_int,
                   fmt: *const ::std::os::raw::c_char, ...);
    pub fn xo_message_hcv(xop: *mut xo_handle_t, code: ::std::os::raw::c_int,
                          fmt: *const ::std::os::raw::c_char, vap: va_list);
    pub fn xo_message_hc(xop: *mut xo_handle_t, code: ::std::os::raw::c_int,
                         fmt: *const ::std::os::raw::c_char, ...);
    pub fn xo_message_c(code: ::std::os::raw::c_int,
                        fmt: *const ::std::os::raw::c_char, ...);
    pub fn xo_message_e(fmt: *const ::std::os::raw::c_char, ...);
    pub fn xo_message(fmt: *const ::std::os::raw::c_char, ...);
    pub fn xo_emit_warn_hcv(xop: *mut xo_handle_t,
                            as_warning: ::std::os::raw::c_int,
                            code: ::std::os::raw::c_int,
                            fmt: *const ::std::os::raw::c_char, vap: va_list);
    pub fn xo_emit_warn_hc(xop: *mut xo_handle_t, code: ::std::os::raw::c_int,
                           fmt: *const ::std::os::raw::c_char, ...);
    pub fn xo_emit_warn_c(code: ::std::os::raw::c_int,
                          fmt: *const ::std::os::raw::c_char, ...);
    pub fn xo_emit_warn(fmt: *const ::std::os::raw::c_char, ...);
    pub fn xo_emit_warnx(fmt: *const ::std::os::raw::c_char, ...);
    pub fn xo_emit_err(eval: ::std::os::raw::c_int,
                       fmt: *const ::std::os::raw::c_char, ...);
    pub fn xo_emit_errx(eval: ::std::os::raw::c_int,
                        fmt: *const ::std::os::raw::c_char, ...);
    pub fn xo_emit_errc(eval: ::std::os::raw::c_int,
                        code: ::std::os::raw::c_int,
                        fmt: *const ::std::os::raw::c_char, ...);
    pub fn xo_emit_err_v(eval: ::std::os::raw::c_int,
                         code: ::std::os::raw::c_int,
                         fmt: *const ::std::os::raw::c_char, vap: va_list);
    pub fn xo_no_setlocale();
    pub fn xo_parse_args(argc: ::std::os::raw::c_int,
                         argv: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn xo_dump_stack(xop: *mut xo_handle_t);
    pub fn xo_set_program(name: *const ::std::os::raw::c_char);
    pub fn xo_set_version(version: *const ::std::os::raw::c_char);
    pub fn xo_set_version_h(xop: *mut xo_handle_t,
                            version: *const ::std::os::raw::c_char);
    pub fn xo_open_log(ident: *const ::std::os::raw::c_char,
                       logopt: ::std::os::raw::c_int,
                       facility: ::std::os::raw::c_int);
    pub fn xo_close_log();
    pub fn xo_set_logmask(maskpri: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn xo_set_unit_test_mode(value: ::std::os::raw::c_int);
    pub fn xo_syslog(priority: ::std::os::raw::c_int,
                     name: *const ::std::os::raw::c_char,
                     message: *const ::std::os::raw::c_char, ...);
    pub fn xo_vsyslog(priority: ::std::os::raw::c_int,
                      name: *const ::std::os::raw::c_char,
                      message: *const ::std::os::raw::c_char, args: va_list);
    pub fn xo_set_syslog_handler(open_func: xo_syslog_open_t,
                                 send_func: xo_syslog_send_t,
                                 close_func: xo_syslog_close_t);
    pub fn xo_set_syslog_enterprise_id(eid: ::std::os::raw::c_ushort);
    pub fn xo_simplify_format(xop: *mut xo_handle_t,
                              fmt: *const ::std::os::raw::c_char,
                              with_numbers: ::std::os::raw::c_int,
                              field_cb: xo_simplify_field_func_t)
     -> *mut ::std::os::raw::c_char;
}
