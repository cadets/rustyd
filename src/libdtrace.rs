/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __clock_t = __int32_t;
pub type __critical_t = __int64_t;
pub type __double_t = ::std::os::raw::c_double;
pub type __float_t = ::std::os::raw::c_float;
pub type __intfptr_t = __int64_t;
pub type __intptr_t = __int64_t;
pub type __intmax_t = __int64_t;
pub type __int_fast8_t = __int32_t;
pub type __int_fast16_t = __int32_t;
pub type __int_fast32_t = __int32_t;
pub type __int_fast64_t = __int64_t;
pub type __int_least8_t = __int8_t;
pub type __int_least16_t = __int16_t;
pub type __int_least32_t = __int32_t;
pub type __int_least64_t = __int64_t;
pub type __ptrdiff_t = __int64_t;
pub type __register_t = __int64_t;
pub type __segsz_t = __int64_t;
pub type __size_t = __uint64_t;
pub type __ssize_t = __int64_t;
pub type __time_t = __int64_t;
pub type __uintfptr_t = __uint64_t;
pub type __uintptr_t = __uint64_t;
pub type __uintmax_t = __uint64_t;
pub type __uint_fast8_t = __uint32_t;
pub type __uint_fast16_t = __uint32_t;
pub type __uint_fast32_t = __uint32_t;
pub type __uint_fast64_t = __uint64_t;
pub type __uint_least8_t = __uint8_t;
pub type __uint_least16_t = __uint16_t;
pub type __uint_least32_t = __uint32_t;
pub type __uint_least64_t = __uint64_t;
pub type __u_register_t = __uint64_t;
pub type __vm_offset_t = __uint64_t;
pub type __vm_paddr_t = __uint64_t;
pub type __vm_size_t = __uint64_t;
pub type __vm_ooffset_t = __int64_t;
pub type __vm_pindex_t = __uint64_t;
pub type ___wchar_t = ::std::os::raw::c_int;
pub type __va_list = __builtin_va_list;
pub type __gnuc_va_list = __va_list;
pub type __blksize_t = __int32_t;
pub type __blkcnt_t = __int64_t;
pub type __clockid_t = __int32_t;
pub type __fflags_t = __uint32_t;
pub type __fsblkcnt_t = __uint64_t;
pub type __fsfilcnt_t = __uint64_t;
pub type __gid_t = __uint32_t;
pub type __id_t = __int64_t;
pub type __ino_t = __uint32_t;
pub type __key_t = ::std::os::raw::c_long;
pub type __lwpid_t = __int32_t;
pub type __mode_t = __uint16_t;
pub type __accmode_t = ::std::os::raw::c_int;
pub type __nl_item = ::std::os::raw::c_int;
pub type __nlink_t = __uint16_t;
pub type __off_t = __int64_t;
pub type __pid_t = __int32_t;
pub type __rlim_t = __int64_t;
pub type __sa_family_t = __uint8_t;
pub type __socklen_t = __uint32_t;
pub type __suseconds_t = ::std::os::raw::c_long;
pub enum __timer { }
pub type __timer_t = *mut __timer;
pub enum __mq { }
pub type __mqd_t = *mut __mq;
pub type __uid_t = __uint32_t;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __cpuwhich_t = ::std::os::raw::c_int;
pub type __cpulevel_t = ::std::os::raw::c_int;
pub type __cpusetid_t = ::std::os::raw::c_int;
pub type __ct_rune_t = ::std::os::raw::c_int;
pub type __rune_t = __ct_rune_t;
pub type __wint_t = __ct_rune_t;
pub type __char16_t = __uint_least16_t;
pub type __char32_t = __uint_least32_t;
pub type __dev_t = __uint32_t;
pub type __fixpt_t = __uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct __mbstate_t {
    pub _bindgen_data_: [u64; 16usize],
}
impl __mbstate_t {
    pub unsafe fn __mbstate8(&mut self)
     -> *mut [::std::os::raw::c_char; 128usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _mbstateL(&mut self) -> *mut __int64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for __mbstate_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for __mbstate_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __rman_res_t = ::std::os::raw::c_ulong;
pub type int8_t = i8;
pub type int16_t = i16;
pub type int32_t = i32;
pub type int64_t = i64;
pub type uint8_t = u8;
pub type uint16_t = u16;
pub type uint32_t = u32;
pub type uint64_t = u64;
pub type intptr_t = isize;
pub type uintptr_t = usize;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = __int_fast8_t;
pub type int_fast16_t = __int_fast16_t;
pub type int_fast32_t = __int_fast32_t;
pub type int_fast64_t = __int_fast64_t;
pub type uint_fast8_t = __uint_fast8_t;
pub type uint_fast16_t = __uint_fast16_t;
pub type uint_fast32_t = __uint_fast32_t;
pub type uint_fast64_t = __uint_fast64_t;
pub enum pthread { }
pub enum pthread_attr { }
pub enum pthread_cond { }
pub enum pthread_cond_attr { }
pub enum pthread_mutex { }
pub enum pthread_mutex_attr { }
pub enum pthread_rwlock { }
pub enum pthread_rwlockattr { }
pub enum pthread_barrier { }
pub enum pthread_barrier_attr { }
pub enum pthread_spinlock { }
pub type pthread_t = *mut pthread;
pub type pthread_attr_t = *mut pthread_attr;
pub type pthread_mutex_t = *mut pthread_mutex;
pub type pthread_mutexattr_t = *mut pthread_mutex_attr;
pub type pthread_cond_t = *mut pthread_cond;
pub type pthread_condattr_t = *mut pthread_cond_attr;
pub type pthread_key_t = ::std::os::raw::c_int;
pub type pthread_once_t = pthread_once;
pub type pthread_rwlock_t = *mut pthread_rwlock;
pub type pthread_rwlockattr_t = *mut pthread_rwlockattr;
pub type pthread_barrier_t = *mut pthread_barrier;
pub enum pthread_barrierattr { }
pub type pthread_barrierattr_t = *mut pthread_barrierattr;
pub type pthread_spinlock_t = *mut pthread_spinlock;
pub type pthread_addr_t = *mut ::std::os::raw::c_void;
pub type pthread_startroutine_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_void)
                              -> *mut ::std::os::raw::c_void>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_once {
    pub state: ::std::os::raw::c_int,
    pub mutex: pthread_mutex_t,
}
impl ::std::default::Default for pthread_once {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint_ = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type u_quad_t = __uint64_t;
pub type quad_t = __int64_t;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type c_caddr_t = *const ::std::os::raw::c_char;
pub type blksize_t = __blksize_t;
pub type cpuwhich_t = __cpuwhich_t;
pub type cpulevel_t = __cpulevel_t;
pub type cpusetid_t = __cpusetid_t;
pub type blkcnt_t = __blkcnt_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type critical_t = __critical_t;
pub type daddr_t = __int64_t;
pub type dev_t = __dev_t;
pub type fflags_t = __fflags_t;
pub type fixpt_t = __fixpt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type gid_t = __gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type id_t = __id_t;
pub type ino_t = __ino_t;
pub type key_t = __key_t;
pub type lwpid_t = __lwpid_t;
pub type mode_t = __mode_t;
pub type accmode_t = __accmode_t;
pub type nlink_t = __nlink_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type register_t = __register_t;
pub type rlim_t = __rlim_t;
pub type sbintime_t = __int64_t;
pub type segsz_t = __segsz_t;
pub type size_t = usize;
pub type ssize_t = isize;
pub type suseconds_t = __suseconds_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type mqd_t = __mqd_t;
pub type u_register_t = __u_register_t;
pub type uid_t = __uid_t;
pub type useconds_t = __useconds_t;
pub type cap_ioctl_t = ::std::os::raw::c_ulong;
pub enum cap_rights { }
pub type cap_rights_t = cap_rights;
pub type vm_offset_t = __vm_offset_t;
pub type vm_ooffset_t = __vm_ooffset_t;
pub type vm_paddr_t = __vm_paddr_t;
pub type vm_pindex_t = __vm_pindex_t;
pub type vm_size_t = __vm_size_t;
pub type rman_res_t = __rman_res_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __sigset {
    pub __bits: [__uint32_t; 4usize],
}
impl ::std::default::Default for __sigset {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __sigset_t = __sigset;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timeval {
    pub tv_sec: time_t,
    pub tv_usec: suseconds_t,
}
impl ::std::default::Default for timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timespec {
    pub tv_sec: time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
impl ::std::default::Default for timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
impl ::std::default::Default for itimerspec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __fd_mask = ::std::os::raw::c_ulong;
pub type fd_mask = __fd_mask;
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
impl ::std::default::Default for fd_set {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type timestruc_t = timespec;
pub type timespec_t = timespec;
pub type uint_t = u_int;
pub type uchar_t = u_char;
pub type ushort_t = u_short;
pub type ulong_t = u_long;
pub type longlong_t = ::std::os::raw::c_longlong;
pub type u_longlong_t = ::std::os::raw::c_ulonglong;
pub type off64_t = off_t;
pub type taskid_t = id_t;
pub type projid_t = id_t;
pub type poolid_t = id_t;
pub type zoneid_t = id_t;
pub type ctid_t = id_t;
pub type o_mode_t = mode_t;
pub type pgcnt_t = uint64_t;
pub type minor_t = u_int;
pub type offset_t = longlong_t;
pub type u_offset_t = u_longlong_t;
pub type upad64_t = uint64_t;
pub type pri_t = ::std::os::raw::c_short;
pub type daddr32_t = int32_t;
pub type time32_t = int32_t;
pub type diskaddr_t = u_longlong_t;
pub type sig_atomic_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy)]
pub struct sigcontext {
    pub sc_mask: __sigset,
    pub sc_onstack: ::std::os::raw::c_long,
    pub sc_rdi: ::std::os::raw::c_long,
    pub sc_rsi: ::std::os::raw::c_long,
    pub sc_rdx: ::std::os::raw::c_long,
    pub sc_rcx: ::std::os::raw::c_long,
    pub sc_r8: ::std::os::raw::c_long,
    pub sc_r9: ::std::os::raw::c_long,
    pub sc_rax: ::std::os::raw::c_long,
    pub sc_rbx: ::std::os::raw::c_long,
    pub sc_rbp: ::std::os::raw::c_long,
    pub sc_r10: ::std::os::raw::c_long,
    pub sc_r11: ::std::os::raw::c_long,
    pub sc_r12: ::std::os::raw::c_long,
    pub sc_r13: ::std::os::raw::c_long,
    pub sc_r14: ::std::os::raw::c_long,
    pub sc_r15: ::std::os::raw::c_long,
    pub sc_trapno: ::std::os::raw::c_int,
    pub sc_fs: ::std::os::raw::c_short,
    pub sc_gs: ::std::os::raw::c_short,
    pub sc_addr: ::std::os::raw::c_long,
    pub sc_flags: ::std::os::raw::c_int,
    pub sc_es: ::std::os::raw::c_short,
    pub sc_ds: ::std::os::raw::c_short,
    pub sc_err: ::std::os::raw::c_long,
    pub sc_rip: ::std::os::raw::c_long,
    pub sc_cs: ::std::os::raw::c_long,
    pub sc_rflags: ::std::os::raw::c_long,
    pub sc_rsp: ::std::os::raw::c_long,
    pub sc_ss: ::std::os::raw::c_long,
    pub sc_len: ::std::os::raw::c_long,
    pub sc_fpformat: ::std::os::raw::c_long,
    pub sc_ownedfp: ::std::os::raw::c_long,
    pub sc_fpstate: [::std::os::raw::c_long; 64usize],
    pub sc_fsbase: ::std::os::raw::c_long,
    pub sc_gsbase: ::std::os::raw::c_long,
    pub sc_xfpustate: ::std::os::raw::c_long,
    pub sc_xfpustate_len: ::std::os::raw::c_long,
    pub sc_spare: [::std::os::raw::c_long; 4usize],
}
impl ::std::clone::Clone for sigcontext {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for sigcontext {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __sighandler_t = extern "C" fn(arg1: ::std::os::raw::c_int);
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sigval {
    pub _bindgen_data_: [u64; 1usize],
}
impl sigval {
    pub unsafe fn sival_int(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sival_ptr(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sigval_int(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sigval_ptr(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for sigval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub _sigev_un: Union_Unnamed1,
}
impl ::std::default::Default for sigevent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed1 {
    pub _bindgen_data_: [u64; 8usize],
}
impl Union_Unnamed1 {
    pub unsafe fn _threadid(&mut self) -> *mut __lwpid_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _sigev_thread(&mut self) -> *mut Struct_Unnamed2 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _kevent_flags(&mut self) -> *mut ::std::os::raw::c_ushort {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __spare__(&mut self)
     -> *mut [::std::os::raw::c_long; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed2 {
    pub _function: ::std::option::Option<extern "C" fn(arg1: sigval)>,
    pub _attribute: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub _reason: Union_Unnamed3,
}
impl ::std::default::Default for __siginfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed3 {
    pub _bindgen_data_: [u64; 5usize],
}
impl Union_Unnamed3 {
    pub unsafe fn _fault(&mut self) -> *mut Struct_Unnamed4 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _timer(&mut self) -> *mut Struct_Unnamed5 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _mesgq(&mut self) -> *mut Struct_Unnamed6 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _poll(&mut self) -> *mut Struct_Unnamed7 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __spare__(&mut self) -> *mut Struct_Unnamed8 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed4 {
    pub _trapno: ::std::os::raw::c_int,
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed5 {
    pub _timerid: ::std::os::raw::c_int,
    pub _overrun: ::std::os::raw::c_int,
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed6 {
    pub _mqd: ::std::os::raw::c_int,
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed7 {
    pub _band: ::std::os::raw::c_long,
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed8 {
    pub __spare1__: ::std::os::raw::c_long,
    pub __spare2__: [::std::os::raw::c_int; 7usize],
}
impl ::std::default::Default for Struct_Unnamed8 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sigaction {
    pub __sigaction_u: Union_Unnamed9,
    pub sa_flags: ::std::os::raw::c_int,
    pub sa_mask: sigset_t,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for sigaction {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed9 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed9 {
    pub unsafe fn __sa_handler(&mut self)
     ->
         *mut ::std::option::Option<extern "C" fn(arg1:
                                                      ::std::os::raw::c_int)> {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __sa_sigaction(&mut self)
     ->
         *mut ::std::option::Option<unsafe extern "C" fn(arg1:
                                                             ::std::os::raw::c_int,
                                                         arg2: *mut __siginfo,
                                                         arg3:
                                                             *mut ::std::os::raw::c_void)> {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed9 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sig_t = *mut __sighandler_t;
pub type __siginfohandler_t =
    unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: *mut __siginfo,
                         arg3: *mut ::std::os::raw::c_void);
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __size_t,
    pub ss_flags: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for sigaltstack {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type stack_t = sigaltstack;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sigvec {
    pub sv_handler: *mut __sighandler_t,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
impl ::std::default::Default for sigvec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_onstack: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for sigstack {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct kld_file_stat {
    pub version: ::std::os::raw::c_int,
    pub name: [::std::os::raw::c_char; 1024usize],
    pub refs: ::std::os::raw::c_int,
    pub id: ::std::os::raw::c_int,
    pub address: caddr_t,
    pub size: size_t,
    pub pathname: [::std::os::raw::c_char; 1024usize],
}
impl ::std::clone::Clone for kld_file_stat {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for kld_file_stat {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct kld_sym_lookup {
    pub version: ::std::os::raw::c_int,
    pub symname: *mut ::std::os::raw::c_char,
    pub symvalue: u_long,
    pub symsize: size_t,
}
impl ::std::default::Default for kld_sym_lookup {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum linker_file { }
pub type modctl_t = linker_file;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum idtype {
    P_PID = 0,
    P_PPID = 1,
    P_PGID = 2,
    P_SID = 3,
    P_CID = 4,
    P_UID = 5,
    P_GID = 6,
    P_ALL = 7,
    P_LWPID = 8,
    P_TASKID = 9,
    P_PROJID = 10,
    P_POOLID = 11,
    P_ZONEID = 12,
    P_CTID = 13,
    P_CPUID = 14,
    P_PSETID = 15,
}
pub type idtype_t = idtype;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum idop { POP_DIFF = 0, POP_AND = 1, POP_OR = 2, POP_XOR = 3, }
pub type idop_t = idop;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct procset {
    pub p_op: idop_t,
    pub p_lidtype: idtype_t,
    pub p_lid: id_t,
    pub p_ridtype: idtype_t,
    pub p_rid: id_t,
}
impl ::std::default::Default for procset {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type procset_t = procset;
pub type lgrpid_t = uint16_t;
pub type processorid_t = ::std::os::raw::c_int;
pub type chipid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct processor_info_t {
    pub pi_state: ::std::os::raw::c_int,
    pub pi_processor_type: [::std::os::raw::c_char; 16usize],
    pub pi_fputypes: [::std::os::raw::c_char; 32usize],
    pub pi_clock: ::std::os::raw::c_int,
}
impl ::std::default::Default for processor_info_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum cpu_setup_t {
    CPU_INIT = 0,
    CPU_CONFIG = 1,
    CPU_UNCONFIG = 2,
    CPU_ON = 3,
    CPU_OFF = 4,
    CPU_CPUPART_IN = 5,
    CPU_CPUPART_OUT = 6,
}
pub type cpu_setup_func_t =
    unsafe extern "C" fn(arg1: cpu_setup_t, arg2: ::std::os::raw::c_int,
                         arg3: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
pub type au_id_t = uid_t;
pub type au_asid_t = pid_t;
pub type au_event_t = u_int16_t;
pub type au_emod_t = u_int16_t;
pub type au_class_t = u_int32_t;
pub type au_asflgs_t = u_int64_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct au_tid {
    pub port: dev_t,
    pub machine: u_int32_t,
}
impl ::std::default::Default for au_tid {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type au_tid_t = au_tid;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct au_tid_addr {
    pub at_port: dev_t,
    pub at_type: u_int32_t,
    pub at_addr: [u_int32_t; 4usize],
}
impl ::std::default::Default for au_tid_addr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type au_tid_addr_t = au_tid_addr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct au_mask {
    pub am_success: ::std::os::raw::c_uint,
    pub am_failure: ::std::os::raw::c_uint,
}
impl ::std::default::Default for au_mask {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type au_mask_t = au_mask;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct auditinfo {
    pub ai_auid: au_id_t,
    pub ai_mask: au_mask_t,
    pub ai_termid: au_tid_t,
    pub ai_asid: au_asid_t,
}
impl ::std::default::Default for auditinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type auditinfo_t = auditinfo;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct auditinfo_addr {
    pub ai_auid: au_id_t,
    pub ai_mask: au_mask_t,
    pub ai_termid: au_tid_addr_t,
    pub ai_asid: au_asid_t,
    pub ai_flags: au_asflgs_t,
}
impl ::std::default::Default for auditinfo_addr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type auditinfo_addr_t = auditinfo_addr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct auditpinfo {
    pub ap_pid: pid_t,
    pub ap_auid: au_id_t,
    pub ap_mask: au_mask_t,
    pub ap_termid: au_tid_t,
    pub ap_asid: au_asid_t,
}
impl ::std::default::Default for auditpinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type auditpinfo_t = auditpinfo;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct auditpinfo_addr {
    pub ap_pid: pid_t,
    pub ap_auid: au_id_t,
    pub ap_mask: au_mask_t,
    pub ap_termid: au_tid_addr_t,
    pub ap_asid: au_asid_t,
    pub ap_flags: au_asflgs_t,
}
impl ::std::default::Default for auditpinfo_addr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type auditpinfo_addr_t = auditpinfo_addr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct au_session {
    pub as_aia_p: *mut auditinfo_addr_t,
    pub as_mask: au_mask_t,
}
impl ::std::default::Default for au_session {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type au_session_t = au_session;
pub enum au_token { }
pub type token_t = au_token;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct au_qctrl {
    pub aq_hiwater: ::std::os::raw::c_int,
    pub aq_lowater: ::std::os::raw::c_int,
    pub aq_bufsz: ::std::os::raw::c_int,
    pub aq_delay: ::std::os::raw::c_int,
    pub aq_minfree: ::std::os::raw::c_int,
}
impl ::std::default::Default for au_qctrl {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type au_qctrl_t = au_qctrl;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct audit_stat {
    pub as_version: ::std::os::raw::c_uint,
    pub as_numevent: ::std::os::raw::c_uint,
    pub as_generated: ::std::os::raw::c_int,
    pub as_nonattrib: ::std::os::raw::c_int,
    pub as_kernel: ::std::os::raw::c_int,
    pub as_audit: ::std::os::raw::c_int,
    pub as_auditctl: ::std::os::raw::c_int,
    pub as_enqueue: ::std::os::raw::c_int,
    pub as_written: ::std::os::raw::c_int,
    pub as_wblocked: ::std::os::raw::c_int,
    pub as_rblocked: ::std::os::raw::c_int,
    pub as_dropped: ::std::os::raw::c_int,
    pub as_totalsize: ::std::os::raw::c_int,
    pub as_memused: ::std::os::raw::c_uint,
}
impl ::std::default::Default for audit_stat {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type au_stat_t = audit_stat;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct audit_fstat {
    pub af_filesz: u_int64_t,
    pub af_currsz: u_int64_t,
}
impl ::std::default::Default for audit_fstat {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type au_fstat_t = audit_fstat;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct au_evclass_map {
    pub ec_number: au_event_t,
    pub ec_class: au_class_t,
}
impl ::std::default::Default for au_evclass_map {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type au_evclass_map_t = au_evclass_map;
pub enum loginclass { }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct xucred {
    pub cr_version: u_int,
    pub cr_uid: uid_t,
    pub cr_ngroups: ::std::os::raw::c_short,
    pub cr_groups: [gid_t; 16usize],
    pub _cr_unused1: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for xucred {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type model_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf_Note {
    pub n_namesz: u_int32_t,
    pub n_descsz: u_int32_t,
    pub n_type: u_int32_t,
}
impl ::std::default::Default for Elf_Note {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf_GNU_Hash_Header {
    pub gh_nbuckets: u_int32_t,
    pub gh_symndx: u_int32_t,
    pub gh_maskwords: u_int32_t,
    pub gh_shift2: u_int32_t,
}
impl ::std::default::Default for Elf_GNU_Hash_Header {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Elf32_Addr = uint32_t;
pub type Elf32_Half = uint16_t;
pub type Elf32_Off = uint32_t;
pub type Elf32_Sword = int32_t;
pub type Elf32_Word = uint32_t;
pub type Elf32_Lword = uint64_t;
pub type Elf32_Hashelt = Elf32_Word;
pub type Elf32_Size = Elf32_Word;
pub type Elf32_Ssize = Elf32_Sword;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_Ehdr {
    pub e_ident: [::std::os::raw::c_uchar; 16usize],
    pub e_type: Elf32_Half,
    pub e_machine: Elf32_Half,
    pub e_version: Elf32_Word,
    pub e_entry: Elf32_Addr,
    pub e_phoff: Elf32_Off,
    pub e_shoff: Elf32_Off,
    pub e_flags: Elf32_Word,
    pub e_ehsize: Elf32_Half,
    pub e_phentsize: Elf32_Half,
    pub e_phnum: Elf32_Half,
    pub e_shentsize: Elf32_Half,
    pub e_shnum: Elf32_Half,
    pub e_shstrndx: Elf32_Half,
}
impl ::std::default::Default for Elf32_Ehdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_Lib {
    pub l_name: Elf32_Word,
    pub l_time_stamp: Elf32_Word,
    pub l_checksum: Elf32_Word,
    pub l_version: Elf32_Word,
    pub l_flags: Elf32_Word,
}
impl ::std::default::Default for Elf32_Lib {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_Shdr {
    pub sh_name: Elf32_Word,
    pub sh_type: Elf32_Word,
    pub sh_flags: Elf32_Word,
    pub sh_addr: Elf32_Addr,
    pub sh_offset: Elf32_Off,
    pub sh_size: Elf32_Word,
    pub sh_link: Elf32_Word,
    pub sh_info: Elf32_Word,
    pub sh_addralign: Elf32_Word,
    pub sh_entsize: Elf32_Word,
}
impl ::std::default::Default for Elf32_Shdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_Phdr {
    pub p_type: Elf32_Word,
    pub p_offset: Elf32_Off,
    pub p_vaddr: Elf32_Addr,
    pub p_paddr: Elf32_Addr,
    pub p_filesz: Elf32_Word,
    pub p_memsz: Elf32_Word,
    pub p_flags: Elf32_Word,
    pub p_align: Elf32_Word,
}
impl ::std::default::Default for Elf32_Phdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_Dyn {
    pub d_tag: Elf32_Sword,
    pub d_un: Union_Unnamed10,
}
impl ::std::default::Default for Elf32_Dyn {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed10 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed10 {
    pub unsafe fn d_val(&mut self) -> *mut Elf32_Word {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn d_ptr(&mut self) -> *mut Elf32_Addr {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed10 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_Rel {
    pub r_offset: Elf32_Addr,
    pub r_info: Elf32_Word,
}
impl ::std::default::Default for Elf32_Rel {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_Rela {
    pub r_offset: Elf32_Addr,
    pub r_info: Elf32_Word,
    pub r_addend: Elf32_Sword,
}
impl ::std::default::Default for Elf32_Rela {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Elf32_Nhdr = Elf_Note;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_Move {
    pub m_value: Elf32_Lword,
    pub m_info: Elf32_Word,
    pub m_poffset: Elf32_Word,
    pub m_repeat: Elf32_Half,
    pub m_stride: Elf32_Half,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for Elf32_Move {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_Cap {
    pub c_tag: Elf32_Word,
    pub c_un: Union_Unnamed11,
}
impl ::std::default::Default for Elf32_Cap {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed11 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed11 {
    pub unsafe fn c_val(&mut self) -> *mut Elf32_Word {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn c_ptr(&mut self) -> *mut Elf32_Addr {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed11 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_Sym {
    pub st_name: Elf32_Word,
    pub st_value: Elf32_Addr,
    pub st_size: Elf32_Word,
    pub st_info: ::std::os::raw::c_uchar,
    pub st_other: ::std::os::raw::c_uchar,
    pub st_shndx: Elf32_Half,
}
impl ::std::default::Default for Elf32_Sym {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_Verdef {
    pub vd_version: Elf32_Half,
    pub vd_flags: Elf32_Half,
    pub vd_ndx: Elf32_Half,
    pub vd_cnt: Elf32_Half,
    pub vd_hash: Elf32_Word,
    pub vd_aux: Elf32_Word,
    pub vd_next: Elf32_Word,
}
impl ::std::default::Default for Elf32_Verdef {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_Verdaux {
    pub vda_name: Elf32_Word,
    pub vda_next: Elf32_Word,
}
impl ::std::default::Default for Elf32_Verdaux {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_Verneed {
    pub vn_version: Elf32_Half,
    pub vn_cnt: Elf32_Half,
    pub vn_file: Elf32_Word,
    pub vn_aux: Elf32_Word,
    pub vn_next: Elf32_Word,
}
impl ::std::default::Default for Elf32_Verneed {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_Vernaux {
    pub vna_hash: Elf32_Word,
    pub vna_flags: Elf32_Half,
    pub vna_other: Elf32_Half,
    pub vna_name: Elf32_Word,
    pub vna_next: Elf32_Word,
}
impl ::std::default::Default for Elf32_Vernaux {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Elf32_Versym = Elf32_Half;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_Syminfo {
    pub si_boundto: Elf32_Half,
    pub si_flags: Elf32_Half,
}
impl ::std::default::Default for Elf32_Syminfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Elf64_Addr = uint64_t;
pub type Elf64_Half = uint16_t;
pub type Elf64_Off = uint64_t;
pub type Elf64_Sword = int32_t;
pub type Elf64_Sxword = int64_t;
pub type Elf64_Word = uint32_t;
pub type Elf64_Lword = uint64_t;
pub type Elf64_Xword = uint64_t;
pub type Elf64_Hashelt = Elf64_Word;
pub type Elf64_Size = Elf64_Xword;
pub type Elf64_Ssize = Elf64_Sxword;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_Ehdr {
    pub e_ident: [::std::os::raw::c_uchar; 16usize],
    pub e_type: Elf64_Half,
    pub e_machine: Elf64_Half,
    pub e_version: Elf64_Word,
    pub e_entry: Elf64_Addr,
    pub e_phoff: Elf64_Off,
    pub e_shoff: Elf64_Off,
    pub e_flags: Elf64_Word,
    pub e_ehsize: Elf64_Half,
    pub e_phentsize: Elf64_Half,
    pub e_phnum: Elf64_Half,
    pub e_shentsize: Elf64_Half,
    pub e_shnum: Elf64_Half,
    pub e_shstrndx: Elf64_Half,
}
impl ::std::default::Default for Elf64_Ehdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_Lib {
    pub l_name: Elf64_Word,
    pub l_time_stamp: Elf64_Word,
    pub l_checksum: Elf64_Word,
    pub l_version: Elf64_Word,
    pub l_flags: Elf64_Word,
}
impl ::std::default::Default for Elf64_Lib {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_Shdr {
    pub sh_name: Elf64_Word,
    pub sh_type: Elf64_Word,
    pub sh_flags: Elf64_Xword,
    pub sh_addr: Elf64_Addr,
    pub sh_offset: Elf64_Off,
    pub sh_size: Elf64_Xword,
    pub sh_link: Elf64_Word,
    pub sh_info: Elf64_Word,
    pub sh_addralign: Elf64_Xword,
    pub sh_entsize: Elf64_Xword,
}
impl ::std::default::Default for Elf64_Shdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_Phdr {
    pub p_type: Elf64_Word,
    pub p_flags: Elf64_Word,
    pub p_offset: Elf64_Off,
    pub p_vaddr: Elf64_Addr,
    pub p_paddr: Elf64_Addr,
    pub p_filesz: Elf64_Xword,
    pub p_memsz: Elf64_Xword,
    pub p_align: Elf64_Xword,
}
impl ::std::default::Default for Elf64_Phdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_Dyn {
    pub d_tag: Elf64_Sxword,
    pub d_un: Union_Unnamed12,
}
impl ::std::default::Default for Elf64_Dyn {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed12 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed12 {
    pub unsafe fn d_val(&mut self) -> *mut Elf64_Xword {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn d_ptr(&mut self) -> *mut Elf64_Addr {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed12 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_Rel {
    pub r_offset: Elf64_Addr,
    pub r_info: Elf64_Xword,
}
impl ::std::default::Default for Elf64_Rel {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_Rela {
    pub r_offset: Elf64_Addr,
    pub r_info: Elf64_Xword,
    pub r_addend: Elf64_Sxword,
}
impl ::std::default::Default for Elf64_Rela {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Elf64_Nhdr = Elf_Note;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_Move {
    pub m_value: Elf64_Lword,
    pub m_info: Elf64_Xword,
    pub m_poffset: Elf64_Xword,
    pub m_repeat: Elf64_Half,
    pub m_stride: Elf64_Half,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for Elf64_Move {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_Cap {
    pub c_tag: Elf64_Xword,
    pub c_un: Union_Unnamed13,
}
impl ::std::default::Default for Elf64_Cap {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed13 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed13 {
    pub unsafe fn c_val(&mut self) -> *mut Elf64_Xword {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn c_ptr(&mut self) -> *mut Elf64_Addr {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed13 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_Sym {
    pub st_name: Elf64_Word,
    pub st_info: ::std::os::raw::c_uchar,
    pub st_other: ::std::os::raw::c_uchar,
    pub st_shndx: Elf64_Half,
    pub st_value: Elf64_Addr,
    pub st_size: Elf64_Xword,
}
impl ::std::default::Default for Elf64_Sym {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_Verdef {
    pub vd_version: Elf64_Half,
    pub vd_flags: Elf64_Half,
    pub vd_ndx: Elf64_Half,
    pub vd_cnt: Elf64_Half,
    pub vd_hash: Elf64_Word,
    pub vd_aux: Elf64_Word,
    pub vd_next: Elf64_Word,
}
impl ::std::default::Default for Elf64_Verdef {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_Verdaux {
    pub vda_name: Elf64_Word,
    pub vda_next: Elf64_Word,
}
impl ::std::default::Default for Elf64_Verdaux {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_Verneed {
    pub vn_version: Elf64_Half,
    pub vn_cnt: Elf64_Half,
    pub vn_file: Elf64_Word,
    pub vn_aux: Elf64_Word,
    pub vn_next: Elf64_Word,
}
impl ::std::default::Default for Elf64_Verneed {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_Vernaux {
    pub vna_hash: Elf64_Word,
    pub vna_flags: Elf64_Half,
    pub vna_other: Elf64_Half,
    pub vna_name: Elf64_Word,
    pub vna_next: Elf64_Word,
}
impl ::std::default::Default for Elf64_Vernaux {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Elf64_Versym = Elf64_Half;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_Syminfo {
    pub si_boundto: Elf64_Half,
    pub si_flags: Elf64_Half,
}
impl ::std::default::Default for Elf64_Syminfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Elf_Addr = Elf64_Addr;
pub type Elf_Half = Elf64_Half;
pub type Elf_Off = Elf64_Off;
pub type Elf_Sword = Elf64_Sword;
pub type Elf_Word = Elf64_Word;
pub type Elf_Ehdr = Elf64_Ehdr;
pub type Elf_Shdr = Elf64_Shdr;
pub type Elf_Phdr = Elf64_Phdr;
pub type Elf_Dyn = Elf64_Dyn;
pub type Elf_Rel = Elf64_Rel;
pub type Elf_Rela = Elf64_Rela;
pub type Elf_Sym = Elf64_Sym;
pub type Elf_Verdef = Elf64_Verdef;
pub type Elf_Verdaux = Elf64_Verdaux;
pub type Elf_Verneed = Elf64_Verneed;
pub type Elf_Vernaux = Elf64_Vernaux;
pub type Elf_Versym = Elf64_Versym;
pub type Elf_Hashelt = Elf64_Hashelt;
pub type Elf_Size = Elf64_Size;
pub type Elf_Ssize = Elf64_Ssize;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_Auxinfo {
    pub a_type: ::std::os::raw::c_int,
    pub a_un: Union_Unnamed14,
}
impl ::std::default::Default for Elf32_Auxinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed14 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed14 {
    pub unsafe fn a_val(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed14 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_Auxinfo {
    pub a_type: ::std::os::raw::c_long,
    pub a_un: Union_Unnamed15,
}
impl ::std::default::Default for Elf64_Auxinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed15 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed15 {
    pub unsafe fn a_val(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn a_ptr(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn a_fcn(&mut self)
     -> *mut ::std::option::Option<extern "C" fn()> {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed15 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Elf_Auxinfo = Elf64_Auxinfo;
pub type Addr = Elf64_Addr;
pub type Cap = Elf64_Cap;
pub type Dyn = Elf64_Dyn;
pub type Ehdr = Elf64_Ehdr;
pub type Move = Elf64_Move;
pub type Off = Elf64_Off;
pub type Phdr = Elf64_Phdr;
pub type Rel = Elf64_Rel;
pub type Rela = Elf64_Rela;
pub type Shdr = Elf64_Shdr;
pub type Sym = Elf64_Sym;
pub type Syminfo = Elf64_Syminfo;
pub type Verdaux = Elf64_Verdaux;
pub type Verdef = Elf64_Verdef;
pub type Vernaux = Elf64_Vernaux;
pub type Verneed = Elf64_Verneed;
pub type Versym = Elf64_Versym;
pub type Half = Elf64_Half;
pub type Sword = Elf64_Sword;
pub type Word = Elf64_Word;
pub type Xword = Elf64_Xword;
pub type Sxword = Elf64_Sxword;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ctf_preamble {
    pub ctp_magic: ushort_t,
    pub ctp_version: uchar_t,
    pub ctp_flags: uchar_t,
}
impl ::std::default::Default for ctf_preamble {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ctf_preamble_t = ctf_preamble;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ctf_header {
    pub cth_preamble: ctf_preamble_t,
    pub cth_parlabel: uint_t,
    pub cth_parname: uint_t,
    pub cth_lbloff: uint_t,
    pub cth_objtoff: uint_t,
    pub cth_funcoff: uint_t,
    pub cth_typeoff: uint_t,
    pub cth_stroff: uint_t,
    pub cth_strlen: uint_t,
}
impl ::std::default::Default for ctf_header {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ctf_header_t = ctf_header;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ctf_lblent {
    pub ctl_label: uint_t,
    pub ctl_typeidx: uint_t,
}
impl ::std::default::Default for ctf_lblent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ctf_lblent_t = ctf_lblent;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ctf_stype {
    pub ctt_name: uint_t,
    pub ctt_info: ushort_t,
    pub _u: Union_Unnamed16,
}
impl ::std::default::Default for ctf_stype {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed16 {
    pub _bindgen_data_: [u16; 1usize],
}
impl Union_Unnamed16 {
    pub unsafe fn _size(&mut self) -> *mut ushort_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _type(&mut self) -> *mut ushort_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed16 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ctf_stype_t = ctf_stype;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ctf_type {
    pub ctt_name: uint_t,
    pub ctt_info: ushort_t,
    pub _u: Union_Unnamed17,
    pub ctt_lsizehi: uint_t,
    pub ctt_lsizelo: uint_t,
}
impl ::std::default::Default for ctf_type {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed17 {
    pub _bindgen_data_: [u16; 1usize],
}
impl Union_Unnamed17 {
    pub unsafe fn _size(&mut self) -> *mut ushort_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _type(&mut self) -> *mut ushort_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed17 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ctf_type_t = ctf_type;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ctf_array {
    pub cta_contents: ushort_t,
    pub cta_index: ushort_t,
    pub cta_nelems: uint_t,
}
impl ::std::default::Default for ctf_array {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ctf_array_t = ctf_array;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ctf_member {
    pub ctm_name: uint_t,
    pub ctm_type: ushort_t,
    pub ctm_offset: ushort_t,
}
impl ::std::default::Default for ctf_member {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ctf_member_t = ctf_member;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ctf_lmember {
    pub ctlm_name: uint_t,
    pub ctlm_type: ushort_t,
    pub ctlm_pad: ushort_t,
    pub ctlm_offsethi: uint_t,
    pub ctlm_offsetlo: uint_t,
}
impl ::std::default::Default for ctf_lmember {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ctf_lmember_t = ctf_lmember;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ctf_enum {
    pub cte_name: uint_t,
    pub cte_value: ::std::os::raw::c_int,
}
impl ::std::default::Default for ctf_enum {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ctf_enum_t = ctf_enum;
pub enum ctf_file { }
pub type ctf_file_t = ctf_file;
pub type ctf_id_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ctf_sect {
    pub cts_name: *const ::std::os::raw::c_char,
    pub cts_type: ulong_t,
    pub cts_flags: ulong_t,
    pub cts_data: *mut ::std::os::raw::c_void,
    pub cts_size: size_t,
    pub cts_entsize: size_t,
    pub cts_offset: off64_t,
}
impl ::std::default::Default for ctf_sect {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ctf_sect_t = ctf_sect;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ctf_encoding {
    pub cte_format: uint_t,
    pub cte_offset: uint_t,
    pub cte_bits: uint_t,
}
impl ::std::default::Default for ctf_encoding {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ctf_encoding_t = ctf_encoding;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ctf_membinfo {
    pub ctm_type: ctf_id_t,
    pub ctm_offset: ulong_t,
}
impl ::std::default::Default for ctf_membinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ctf_membinfo_t = ctf_membinfo;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ctf_arinfo {
    pub ctr_contents: ctf_id_t,
    pub ctr_index: ctf_id_t,
    pub ctr_nelems: uint_t,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for ctf_arinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ctf_arinfo_t = ctf_arinfo;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ctf_funcinfo {
    pub ctc_return: ctf_id_t,
    pub ctc_argc: uint_t,
    pub ctc_flags: uint_t,
}
impl ::std::default::Default for ctf_funcinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ctf_funcinfo_t = ctf_funcinfo;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ctf_lblinfo {
    pub ctb_typeidx: ctf_id_t,
}
impl ::std::default::Default for ctf_lblinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ctf_lblinfo_t = ctf_lblinfo;
pub type ctf_visit_f =
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char, arg2: ctf_id_t,
                         arg3: ulong_t, arg4: ::std::os::raw::c_int,
                         arg5: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
pub type ctf_member_f =
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char, arg2: ctf_id_t,
                         arg3: ulong_t, arg4: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
pub type ctf_enum_f =
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char,
                         arg2: ::std::os::raw::c_int,
                         arg3: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
pub type ctf_type_f =
    unsafe extern "C" fn(arg1: ctf_id_t, arg2: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
pub type ctf_label_f =
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char,
                         arg2: *const ctf_lblinfo_t,
                         arg3: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
pub type dtrace_id_t = uint32_t;
pub type dtrace_epid_t = uint32_t;
pub type dtrace_aggid_t = uint32_t;
pub type dtrace_aggvarid_t = int64_t;
pub type dtrace_actkind_t = uint16_t;
pub type dtrace_optval_t = int64_t;
pub type dtrace_cacheid_t = uint32_t;
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum dtrace_probespec {
    DTRACE_PROBESPEC_NONE = -1,
    DTRACE_PROBESPEC_PROVIDER = 0,
    DTRACE_PROBESPEC_MOD = 1,
    DTRACE_PROBESPEC_FUNC = 2,
    DTRACE_PROBESPEC_NAME = 3,
}
pub type dtrace_probespec_t = dtrace_probespec;
pub type dif_instr_t = uint32_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dtrace_diftype {
    pub dtdt_kind: uint8_t,
    pub dtdt_ckind: uint8_t,
    pub dtdt_flags: uint8_t,
    pub dtdt_pad: uint8_t,
    pub dtdt_size: uint32_t,
}
impl ::std::default::Default for dtrace_diftype {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_diftype_t = dtrace_diftype;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dtrace_difv {
    pub dtdv_name: uint32_t,
    pub dtdv_id: uint32_t,
    pub dtdv_kind: uint8_t,
    pub dtdv_scope: uint8_t,
    pub dtdv_flags: uint16_t,
    pub dtdv_type: dtrace_diftype_t,
}
impl ::std::default::Default for dtrace_difv {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_difv_t = dtrace_difv;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dof_hdr {
    pub dofh_ident: [uint8_t; 16usize],
    pub dofh_flags: uint32_t,
    pub dofh_hdrsize: uint32_t,
    pub dofh_secsize: uint32_t,
    pub dofh_secnum: uint32_t,
    pub dofh_secoff: uint64_t,
    pub dofh_loadsz: uint64_t,
    pub dofh_filesz: uint64_t,
    pub dofh_pad: uint64_t,
}
impl ::std::default::Default for dof_hdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dof_hdr_t = dof_hdr;
pub type dof_secidx_t = uint32_t;
pub type dof_stridx_t = uint32_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dof_sec {
    pub dofs_type: uint32_t,
    pub dofs_align: uint32_t,
    pub dofs_flags: uint32_t,
    pub dofs_entsize: uint32_t,
    pub dofs_offset: uint64_t,
    pub dofs_size: uint64_t,
}
impl ::std::default::Default for dof_sec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dof_sec_t = dof_sec;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dof_ecbdesc {
    pub dofe_probes: dof_secidx_t,
    pub dofe_pred: dof_secidx_t,
    pub dofe_actions: dof_secidx_t,
    pub dofe_pad: uint32_t,
    pub dofe_uarg: uint64_t,
}
impl ::std::default::Default for dof_ecbdesc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dof_ecbdesc_t = dof_ecbdesc;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dof_probedesc {
    pub dofp_strtab: dof_secidx_t,
    pub dofp_provider: dof_stridx_t,
    pub dofp_mod: dof_stridx_t,
    pub dofp_func: dof_stridx_t,
    pub dofp_name: dof_stridx_t,
    pub dofp_id: uint32_t,
}
impl ::std::default::Default for dof_probedesc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dof_probedesc_t = dof_probedesc;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dof_actdesc {
    pub dofa_difo: dof_secidx_t,
    pub dofa_strtab: dof_secidx_t,
    pub dofa_kind: uint32_t,
    pub dofa_ntuple: uint32_t,
    pub dofa_arg: uint64_t,
    pub dofa_uarg: uint64_t,
}
impl ::std::default::Default for dof_actdesc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dof_actdesc_t = dof_actdesc;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dof_difohdr {
    pub dofd_rtype: dtrace_diftype_t,
    pub dofd_links: [dof_secidx_t; 1usize],
}
impl ::std::default::Default for dof_difohdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dof_difohdr_t = dof_difohdr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dof_relohdr {
    pub dofr_strtab: dof_secidx_t,
    pub dofr_relsec: dof_secidx_t,
    pub dofr_tgtsec: dof_secidx_t,
}
impl ::std::default::Default for dof_relohdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dof_relohdr_t = dof_relohdr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dof_relodesc {
    pub dofr_name: dof_stridx_t,
    pub dofr_type: uint32_t,
    pub dofr_offset: uint64_t,
    pub dofr_data: uint64_t,
}
impl ::std::default::Default for dof_relodesc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dof_relodesc_t = dof_relodesc;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dof_optdesc {
    pub dofo_option: uint32_t,
    pub dofo_strtab: dof_secidx_t,
    pub dofo_value: uint64_t,
}
impl ::std::default::Default for dof_optdesc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dof_optdesc_t = dof_optdesc;
pub type dof_attr_t = uint32_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dof_provider {
    pub dofpv_strtab: dof_secidx_t,
    pub dofpv_probes: dof_secidx_t,
    pub dofpv_prargs: dof_secidx_t,
    pub dofpv_proffs: dof_secidx_t,
    pub dofpv_name: dof_stridx_t,
    pub dofpv_provattr: dof_attr_t,
    pub dofpv_modattr: dof_attr_t,
    pub dofpv_funcattr: dof_attr_t,
    pub dofpv_nameattr: dof_attr_t,
    pub dofpv_argsattr: dof_attr_t,
    pub dofpv_prenoffs: dof_secidx_t,
}
impl ::std::default::Default for dof_provider {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dof_provider_t = dof_provider;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dof_probe {
    pub dofpr_addr: uint64_t,
    pub dofpr_func: dof_stridx_t,
    pub dofpr_name: dof_stridx_t,
    pub dofpr_nargv: dof_stridx_t,
    pub dofpr_xargv: dof_stridx_t,
    pub dofpr_argidx: uint32_t,
    pub dofpr_offidx: uint32_t,
    pub dofpr_nargc: uint8_t,
    pub dofpr_xargc: uint8_t,
    pub dofpr_noffs: uint16_t,
    pub dofpr_enoffidx: uint32_t,
    pub dofpr_nenoffs: uint16_t,
    pub dofpr_pad1: uint16_t,
    pub dofpr_pad2: uint32_t,
}
impl ::std::default::Default for dof_probe {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dof_probe_t = dof_probe;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dof_xlator {
    pub dofxl_members: dof_secidx_t,
    pub dofxl_strtab: dof_secidx_t,
    pub dofxl_argv: dof_stridx_t,
    pub dofxl_argc: uint32_t,
    pub dofxl_type: dof_stridx_t,
    pub dofxl_attr: dof_attr_t,
}
impl ::std::default::Default for dof_xlator {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dof_xlator_t = dof_xlator;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dof_xlmember {
    pub dofxm_difo: dof_secidx_t,
    pub dofxm_name: dof_stridx_t,
    pub dofxm_type: dtrace_diftype_t,
}
impl ::std::default::Default for dof_xlmember {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dof_xlmember_t = dof_xlmember;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dof_xlref {
    pub dofxr_xlator: dof_secidx_t,
    pub dofxr_member: uint32_t,
    pub dofxr_argn: uint32_t,
}
impl ::std::default::Default for dof_xlref {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dof_xlref_t = dof_xlref;
pub enum dt_node { }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dtrace_difo {
    pub dtdo_buf: *mut dif_instr_t,
    pub dtdo_inttab: *mut uint64_t,
    pub dtdo_strtab: *mut ::std::os::raw::c_char,
    pub dtdo_vartab: *mut dtrace_difv_t,
    pub dtdo_len: uint_t,
    pub dtdo_intlen: uint_t,
    pub dtdo_strlen: uint_t,
    pub dtdo_varlen: uint_t,
    pub dtdo_rtype: dtrace_diftype_t,
    pub dtdo_refcnt: uint_t,
    pub dtdo_destructive: uint_t,
    pub dtdo_kreltab: *mut dof_relodesc_t,
    pub dtdo_ureltab: *mut dof_relodesc_t,
    pub dtdo_xlmtab: *mut *mut dt_node,
    pub dtdo_krelen: uint_t,
    pub dtdo_urelen: uint_t,
    pub dtdo_xlmlen: uint_t,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for dtrace_difo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_difo_t = dtrace_difo;
pub enum dtrace_predicate { }
#[repr(C)]
#[derive(Copy)]
pub struct dtrace_probedesc {
    pub dtpd_id: dtrace_id_t,
    pub dtpd_provider: [::std::os::raw::c_char; 64usize],
    pub dtpd_mod: [::std::os::raw::c_char; 64usize],
    pub dtpd_func: [::std::os::raw::c_char; 128usize],
    pub dtpd_name: [::std::os::raw::c_char; 64usize],
}
impl ::std::clone::Clone for dtrace_probedesc {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for dtrace_probedesc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_probedesc_t = dtrace_probedesc;
#[repr(C)]
#[derive(Copy, Clone)]
//#[derive(Debug)]
pub struct dtrace_repldesc {
    pub dtrpd_match: dtrace_probedesc_t,
    pub dtrpd_create: dtrace_probedesc_t,
}
impl ::std::default::Default for dtrace_repldesc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_repldesc_t = dtrace_repldesc;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dtrace_preddesc {
    pub dtpdd_difo: *mut dtrace_difo_t,
    pub dtpdd_predicate: *mut dtrace_predicate,
}
impl ::std::default::Default for dtrace_preddesc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_preddesc_t = dtrace_preddesc;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dtrace_actdesc {
    pub dtad_difo: *mut dtrace_difo_t,
    pub dtad_next: *mut dtrace_actdesc,
    pub dtad_kind: dtrace_actkind_t,
    pub dtad_ntuple: uint32_t,
    pub dtad_arg: uint64_t,
    pub dtad_uarg: uint64_t,
    pub dtad_refcnt: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for dtrace_actdesc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_actdesc_t = dtrace_actdesc;
#[repr(C)]
#[derive(Copy, Clone)]
//#[derive(Debug)]
pub struct dtrace_ecbdesc {
    pub dted_action: *mut dtrace_actdesc_t,
    pub dted_pred: dtrace_preddesc_t,
    pub dted_probe: dtrace_probedesc_t,
    pub dted_uarg: uint64_t,
    pub dted_refcnt: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for dtrace_ecbdesc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_ecbdesc_t = dtrace_ecbdesc;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dtrace_recdesc {
    pub dtrd_action: dtrace_actkind_t,
    pub dtrd_size: uint32_t,
    pub dtrd_offset: uint32_t,
    pub dtrd_alignment: uint16_t,
    pub dtrd_format: uint16_t,
    pub dtrd_arg: uint64_t,
    pub dtrd_uarg: uint64_t,
}
impl ::std::default::Default for dtrace_recdesc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_recdesc_t = dtrace_recdesc;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dtrace_eprobedesc {
    pub dtepd_epid: dtrace_epid_t,
    pub dtepd_probeid: dtrace_id_t,
    pub dtepd_uarg: uint64_t,
    pub dtepd_size: uint32_t,
    pub dtepd_nrecs: ::std::os::raw::c_int,
    pub dtepd_rec: [dtrace_recdesc_t; 1usize],
}
impl ::std::default::Default for dtrace_eprobedesc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_eprobedesc_t = dtrace_eprobedesc;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dtrace_aggdesc {
    pub dtagd_name: *mut ::std::os::raw::c_char,
    pub dtagd_varid: dtrace_aggvarid_t,
    pub dtagd_flags: ::std::os::raw::c_int,
    pub dtagd_id: dtrace_aggid_t,
    pub dtagd_epid: dtrace_epid_t,
    pub dtagd_size: uint32_t,
    pub dtagd_nrecs: ::std::os::raw::c_int,
    pub dtagd_pad: uint32_t,
    pub dtagd_rec: [dtrace_recdesc_t; 1usize],
}
impl ::std::default::Default for dtrace_aggdesc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_aggdesc_t = dtrace_aggdesc;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dtrace_fmtdesc {
    pub dtfd_string: *mut ::std::os::raw::c_char,
    pub dtfd_length: ::std::os::raw::c_int,
    pub dtfd_format: uint16_t,
    _bindgen_padding_0_: [u8; 2usize],
}
impl ::std::default::Default for dtrace_fmtdesc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_fmtdesc_t = dtrace_fmtdesc;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dtrace_bufdesc {
    pub dtbd_size: uint64_t,
    pub dtbd_cpu: uint32_t,
    pub dtbd_errors: uint32_t,
    pub dtbd_drops: uint64_t,
    pub dtbd_data: *mut ::std::os::raw::c_char,
    pub dtbd_oldest: uint64_t,
    pub dtbd_timestamp: uint64_t,
}
impl ::std::default::Default for dtrace_bufdesc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_bufdesc_t = dtrace_bufdesc;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dtrace_rechdr {
    pub dtrh_epid: dtrace_epid_t,
    pub dtrh_timestamp_hi: uint32_t,
    pub dtrh_timestamp_lo: uint32_t,
}
impl ::std::default::Default for dtrace_rechdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_rechdr_t = dtrace_rechdr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dtrace_status {
    pub dtst_dyndrops: uint64_t,
    pub dtst_dyndrops_rinsing: uint64_t,
    pub dtst_dyndrops_dirty: uint64_t,
    pub dtst_specdrops: uint64_t,
    pub dtst_specdrops_busy: uint64_t,
    pub dtst_specdrops_unavail: uint64_t,
    pub dtst_errors: uint64_t,
    pub dtst_filled: uint64_t,
    pub dtst_stkstroverflows: uint64_t,
    pub dtst_dblerrors: uint64_t,
    pub dtst_killed: ::std::os::raw::c_char,
    pub dtst_exiting: ::std::os::raw::c_char,
    pub dtst_pad: [::std::os::raw::c_char; 6usize],
}
impl ::std::default::Default for dtrace_status {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_status_t = dtrace_status;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dtrace_conf {
    pub dtc_difversion: uint_t,
    pub dtc_difintregs: uint_t,
    pub dtc_diftupregs: uint_t,
    pub dtc_ctfmodel: uint_t,
    pub dtc_pad: [uint_t; 8usize],
}
impl ::std::default::Default for dtrace_conf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_conf_t = dtrace_conf;
#[repr(C)]
#[derive(Copy)]
pub struct dtrace_argdesc {
    pub dtargd_id: dtrace_id_t,
    pub dtargd_ndx: ::std::os::raw::c_int,
    pub dtargd_mapping: ::std::os::raw::c_int,
    pub dtargd_native: [::std::os::raw::c_char; 128usize],
    pub dtargd_xlate: [::std::os::raw::c_char; 128usize],
}
impl ::std::clone::Clone for dtrace_argdesc {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for dtrace_argdesc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_argdesc_t = dtrace_argdesc;
pub type dtrace_stability_t = uint8_t;
pub type dtrace_class_t = uint8_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dtrace_ppriv {
    pub dtpp_flags: uint32_t,
    pub dtpp_uid: uid_t,
    pub dtpp_zoneid: zoneid_t,
}
impl ::std::default::Default for dtrace_ppriv {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_ppriv_t = dtrace_ppriv;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dtrace_attribute {
    pub dtat_name: dtrace_stability_t,
    pub dtat_data: dtrace_stability_t,
    pub dtat_class: dtrace_class_t,
}
impl ::std::default::Default for dtrace_attribute {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_attribute_t = dtrace_attribute;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dtrace_pattr {
    pub dtpa_provider: dtrace_attribute_t,
    pub dtpa_mod: dtrace_attribute_t,
    pub dtpa_func: dtrace_attribute_t,
    pub dtpa_name: dtrace_attribute_t,
    pub dtpa_args: dtrace_attribute_t,
}
impl ::std::default::Default for dtrace_pattr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_pattr_t = dtrace_pattr;
#[repr(C)]
#[derive(Copy)]
pub struct dtrace_providerdesc {
    pub dtvd_name: [::std::os::raw::c_char; 64usize],
    pub dtvd_attr: dtrace_pattr_t,
    pub dtvd_priv: dtrace_ppriv_t,
}
impl ::std::clone::Clone for dtrace_providerdesc {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for dtrace_providerdesc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_providerdesc_t = dtrace_providerdesc;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dtrace_enable_io_t {
    pub dof: *mut ::std::os::raw::c_void,
    pub n_matched: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for dtrace_enable_io_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct dof_helper {
    pub dofhp_mod: [::std::os::raw::c_char; 64usize],
    pub dofhp_addr: uint64_t,
    pub dofhp_dof: uint64_t,
    pub dofhp_pid: pid_t,
    pub dofhp_gen: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for dof_helper {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for dof_helper {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dof_helper_t = dof_helper;
pub type va_list = __va_list;
pub type fpos_t = __off_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for __sbuf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
//#[derive(Debug)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                               *mut ::std::os::raw::c_void)
                                          -> ::std::os::raw::c_int>,
    pub _read: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut ::std::os::raw::c_void,
                                                          arg2:
                                                              *mut ::std::os::raw::c_char,
                                                          arg3:
                                                              ::std::os::raw::c_int)
                                         -> ::std::os::raw::c_int>,
    pub _seek: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut ::std::os::raw::c_void,
                                                          arg2: fpos_t,
                                                          arg3:
                                                              ::std::os::raw::c_int)
                                         -> fpos_t>,
    pub _write: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                               *mut ::std::os::raw::c_void,
                                                           arg2:
                                                               *const ::std::os::raw::c_char,
                                                           arg3:
                                                               ::std::os::raw::c_int)
                                          -> ::std::os::raw::c_int>,
    pub _ub: __sbuf,
    pub _up: *mut ::std::os::raw::c_uchar,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
    pub _fl_mutex: *mut pthread_mutex,
    pub _fl_owner: *mut pthread,
    pub _fl_count: ::std::os::raw::c_int,
    pub _orientation: ::std::os::raw::c_int,
    pub _mbstate: __mbstate_t,
    pub _flags2: ::std::os::raw::c_int,
}
impl ::std::default::Default for __sFILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type FILE = __sFILE;
pub enum _Elf { }
pub type Elf = _Elf;
pub enum _Elf_Scn { }
pub type Elf_Scn = _Elf_Scn;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Elf_Kind {
    ELF_K_NONE = 0,
    ELF_K_AR = 1,
    ELF_K_COFF = 2,
    ELF_K_ELF = 3,
    ELF_K_NUM = 4,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Elf_Type {
    ELF_T_ADDR = 0,
    ELF_T_BYTE = 1,
    ELF_T_CAP = 2,
    ELF_T_DYN = 3,
    ELF_T_EHDR = 4,
    ELF_T_HALF = 5,
    ELF_T_LWORD = 6,
    ELF_T_MOVE = 7,
    ELF_T_MOVEP = 8,
    ELF_T_NOTE = 9,
    ELF_T_OFF = 10,
    ELF_T_PHDR = 11,
    ELF_T_REL = 12,
    ELF_T_RELA = 13,
    ELF_T_SHDR = 14,
    ELF_T_SWORD = 15,
    ELF_T_SXWORD = 16,
    ELF_T_SYMINFO = 17,
    ELF_T_SYM = 18,
    ELF_T_VDEF = 19,
    ELF_T_VNEED = 20,
    ELF_T_WORD = 21,
    ELF_T_XWORD = 22,
    ELF_T_GNUHASH = 23,
    ELF_T_NUM = 24,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Elf_Cmd {
    ELF_C_NULL = 0,
    ELF_C_CLR = 1,
    ELF_C_FDDONE = 2,
    ELF_C_FDREAD = 3,
    ELF_C_RDWR = 4,
    ELF_C_READ = 5,
    ELF_C_SET = 6,
    ELF_C_WRITE = 7,
    ELF_C_NUM = 8,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _Elf_Data {
    pub d_align: uint64_t,
    pub d_buf: *mut ::std::os::raw::c_void,
    pub d_off: uint64_t,
    pub d_size: uint64_t,
    pub d_type: Elf_Type,
    pub d_version: ::std::os::raw::c_uint,
}
impl ::std::default::Default for _Elf_Data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Elf_Data = _Elf_Data;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf_Arhdr {
    pub ar_date: time_t,
    pub ar_name: *mut ::std::os::raw::c_char,
    pub ar_gid: gid_t,
    pub ar_mode: mode_t,
    pub ar_rawname: *mut ::std::os::raw::c_char,
    pub ar_size: size_t,
    pub ar_uid: uid_t,
    pub ar_flags: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Elf_Arhdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf_Arsym {
    pub as_off: off_t,
    pub as_hash: ::std::os::raw::c_ulong,
    pub as_name: *mut ::std::os::raw::c_char,
}
impl ::std::default::Default for Elf_Arsym {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Elf_Error {
    ELF_E_NONE = 0,
    ELF_E_ARCHIVE = 1,
    ELF_E_ARGUMENT = 2,
    ELF_E_CLASS = 3,
    ELF_E_DATA = 4,
    ELF_E_HEADER = 5,
    ELF_E_IO = 6,
    ELF_E_LAYOUT = 7,
    ELF_E_MODE = 8,
    ELF_E_RANGE = 9,
    ELF_E_RESOURCE = 10,
    ELF_E_SECTION = 11,
    ELF_E_SEQUENCE = 12,
    ELF_E_UNIMPL = 13,
    ELF_E_VERSION = 14,
    ELF_E_NUM = 15,
}
pub type GElf_Addr = Elf64_Addr;
pub type GElf_Half = Elf64_Half;
pub type GElf_Off = Elf64_Off;
pub type GElf_Sword = Elf64_Sword;
pub type GElf_Sxword = Elf64_Sxword;
pub type GElf_Word = Elf64_Word;
pub type GElf_Xword = Elf64_Xword;
pub type GElf_Dyn = Elf64_Dyn;
pub type GElf_Ehdr = Elf64_Ehdr;
pub type GElf_Phdr = Elf64_Phdr;
pub type GElf_Shdr = Elf64_Shdr;
pub type GElf_Sym = Elf64_Sym;
pub type GElf_Rel = Elf64_Rel;
pub type GElf_Rela = Elf64_Rela;
pub type GElf_Cap = Elf64_Cap;
pub type GElf_Move = Elf64_Move;
pub type GElf_Syminfo = Elf64_Syminfo;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum rd_err_e {
    RD_OK = 0,
    RD_ERR = 1,
    RD_DBERR = 2,
    RD_NOCAPAB = 3,
    RD_NODYNAM = 4,
    RD_NOBASE = 5,
    RD_NOMAPS = 6,
}
pub enum proc_handle { }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct rd_agent {
    pub rda_php: *mut proc_handle,
    pub rda_dlactivity_addr: uintptr_t,
    pub rda_preinit_addr: uintptr_t,
    pub rda_postinit_addr: uintptr_t,
}
impl ::std::default::Default for rd_agent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rd_agent_t = rd_agent;
#[repr(C)]
#[derive(Copy)]
pub struct rd_loadobj {
    pub rdl_saddr: uintptr_t,
    pub rdl_eaddr: uintptr_t,
    pub rdl_offset: uint32_t,
    pub rdl_prot: uint8_t,
    pub rdl_type: Enum_Unnamed18,
    pub rdl_path: [::std::os::raw::c_uchar; 1024usize],
}
impl ::std::clone::Clone for rd_loadobj {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for rd_loadobj {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed18 {
    RDL_TYPE_NONE = 0,
    RDL_TYPE_DEF = 1,
    RDL_TYPE_VNODE = 2,
    RDL_TYPE_SWAP = 3,
    RDL_TYPE_DEV = 4,
    RDL_TYPE_UNKNOWN = 255,
}
pub type rd_loadobj_t = rd_loadobj;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum rd_event_e {
    RD_NONE = 0,
    RD_PREINIT = 1,
    RD_POSTINIT = 2,
    RD_DLACTIVITY = 3,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum rd_notify_e {
    RD_NOTIFY_BPT = 0,
    RD_NOTIFY_AUTOBPT = 1,
    RD_NOTIFY_SYSCALL = 2,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct rd_notify {
    pub type_: rd_notify_e,
    pub u: Union_Unnamed19,
}
impl ::std::default::Default for rd_notify {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed19 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed19 {
    pub unsafe fn bptaddr(&mut self) -> *mut uintptr_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn syscallno(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed19 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rd_notify_t = rd_notify;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum rd_state_e {
    RD_NOSTATE = 0,
    RD_CONSISTENT = 1,
    RD_ADD = 2,
    RD_DELETE = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct rd_event_msg {
    pub type_: rd_event_e,
    pub u: Union_Unnamed20,
}
impl ::std::default::Default for rd_event_msg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed20 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed20 {
    pub unsafe fn state(&mut self) -> *mut rd_state_e {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed20 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rd_event_msg_t = rd_event_msg;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum rd_skip_e {
    RD_RESOLVE_NONE = 0,
    RD_RESOLVE_STEP = 1,
    RD_RESOLVE_TARGET = 2,
    RD_RESOLVE_TARGET_STEP = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct rd_plt_info {
    pub pi_skip_method: rd_skip_e,
    pub pi_nstep: ::std::os::raw::c_long,
    pub pi_target: uintptr_t,
    pub pi_baddr: uintptr_t,
    pub pi_flags: ::std::os::raw::c_uint,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for rd_plt_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rd_plt_info_t = rd_plt_info;
pub type rl_iter_f =
    unsafe extern "C" fn(arg1: *const rd_loadobj_t,
                         arg2: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
pub enum proc_ { }
pub type proc_child_func =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Copy)]
pub struct prmap {
    pub pr_vaddr: uintptr_t,
    pub pr_size: size_t,
    pub pr_offset: size_t,
    pub pr_mapname: [::std::os::raw::c_char; 1024usize],
    pub pr_mflags: uint8_t,
}
impl ::std::clone::Clone for prmap {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for prmap {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type prmap_t = prmap;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct prsyminfo {
    pub prs_lmid: u_int,
    pub prs_id: u_int,
}
impl ::std::default::Default for prsyminfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type prsyminfo_t = prsyminfo;
pub type proc_map_f =
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void,
                         arg2: *const prmap_t,
                         arg3: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
pub type proc_sym_f =
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void,
                         arg2: *const GElf_Sym,
                         arg3: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum proc_reg_t { REG_PC = 0, REG_SP = 1, REG_RVAL1 = 2, REG_RVAL2 = 3, }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct lwpstatus {
    pub pr_why: ::std::os::raw::c_int,
    pub pr_what: ::std::os::raw::c_int,
}
impl ::std::default::Default for lwpstatus {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type lwpstatus_t = lwpstatus;
pub enum ps_prochandle { }
pub enum dtrace_hdl { }
pub type dtrace_hdl_t = dtrace_hdl;
pub enum dtrace_prog { }
pub type dtrace_prog_t = dtrace_prog;
pub type dtrace_vector_t = dtrace_vector;
pub type dtrace_aggdata_t = dtrace_aggdata;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dtrace_proginfo {
    pub dpi_descattr: dtrace_attribute_t,
    pub dpi_stmtattr: dtrace_attribute_t,
    pub dpi_aggregates: uint_t,
    pub dpi_recgens: uint_t,
    pub dpi_matches: uint_t,
    pub dpi_speculations: uint_t,
}
impl ::std::default::Default for dtrace_proginfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_proginfo_t = dtrace_proginfo;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dtrace_stmtdesc {
    pub dtsd_ecbdesc: *mut dtrace_ecbdesc_t,
    pub dtsd_action: *mut dtrace_actdesc_t,
    pub dtsd_action_last: *mut dtrace_actdesc_t,
    pub dtsd_aggdata: *mut ::std::os::raw::c_void,
    pub dtsd_fmtdata: *mut ::std::os::raw::c_void,
    pub dtsd_strdata: *mut ::std::os::raw::c_void,
    pub dtsd_callback: ::std::option::Option<extern "C" fn()>,
    pub dtsd_data: *mut ::std::os::raw::c_void,
    pub dtsd_descattr: dtrace_attribute_t,
    pub dtsd_stmtattr: dtrace_attribute_t,
    _bindgen_padding_0_: [u8; 2usize],
}
impl ::std::default::Default for dtrace_stmtdesc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_stmtdesc_t = dtrace_stmtdesc;
pub type dtrace_stmt_f =
    unsafe extern "C" fn(arg1: *mut dtrace_hdl_t, arg2: *mut dtrace_prog_t,
                         arg3: *mut dtrace_stmtdesc_t,
                         arg4: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum dtrace_flowkind_t {
    DTRACEFLOW_ENTRY = 0,
    DTRACEFLOW_RETURN = 1,
    DTRACEFLOW_NONE = 2,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dtrace_probedata {
    pub dtpda_handle: *mut dtrace_hdl_t,
    pub dtpda_edesc: *mut dtrace_eprobedesc_t,
    pub dtpda_pdesc: *mut dtrace_probedesc_t,
    pub dtpda_cpu: processorid_t,
    pub dtpda_data: caddr_t,
    pub dtpda_flow: dtrace_flowkind_t,
    pub dtpda_prefix: *const ::std::os::raw::c_char,
    pub dtpda_indent: ::std::os::raw::c_int,
    pub dtpda_timestamp: uint64_t,
}
impl ::std::default::Default for dtrace_probedata {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_probedata_t = dtrace_probedata;
pub type dtrace_consume_probe_f =
    unsafe extern "C" fn(arg1: *const dtrace_probedata_t,
                         arg2: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
pub type dtrace_consume_rec_f =
    unsafe extern "C" fn(arg1: *const dtrace_probedata_t,
                         arg2: *const dtrace_recdesc_t,
                         arg3: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum dtrace_workstatus_t {
    DTRACE_WORKSTATUS_ERROR = -1,
    DTRACE_WORKSTATUS_OKAY = 0,
    DTRACE_WORKSTATUS_DONE = 1,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dtrace_errdata {
    pub dteda_handle: *mut dtrace_hdl_t,
    pub dteda_edesc: *mut dtrace_eprobedesc_t,
    pub dteda_pdesc: *mut dtrace_probedesc_t,
    pub dteda_cpu: processorid_t,
    pub dteda_action: ::std::os::raw::c_int,
    pub dteda_offset: ::std::os::raw::c_int,
    pub dteda_fault: ::std::os::raw::c_int,
    pub dteda_addr: uint64_t,
    pub dteda_msg: *const ::std::os::raw::c_char,
}
impl ::std::default::Default for dtrace_errdata {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_errdata_t = dtrace_errdata;
pub type dtrace_handle_err_f =
    unsafe extern "C" fn(arg1: *const dtrace_errdata_t,
                         arg2: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum dtrace_dropkind_t {
    DTRACEDROP_PRINCIPAL = 0,
    DTRACEDROP_AGGREGATION = 1,
    DTRACEDROP_DYNAMIC = 2,
    DTRACEDROP_DYNRINSE = 3,
    DTRACEDROP_DYNDIRTY = 4,
    DTRACEDROP_SPEC = 5,
    DTRACEDROP_SPECBUSY = 6,
    DTRACEDROP_SPECUNAVAIL = 7,
    DTRACEDROP_STKSTROVERFLOW = 8,
    DTRACEDROP_DBLERROR = 9,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dtrace_dropdata {
    pub dtdda_handle: *mut dtrace_hdl_t,
    pub dtdda_cpu: processorid_t,
    pub dtdda_kind: dtrace_dropkind_t,
    pub dtdda_drops: uint64_t,
    pub dtdda_total: uint64_t,
    pub dtdda_msg: *const ::std::os::raw::c_char,
}
impl ::std::default::Default for dtrace_dropdata {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_dropdata_t = dtrace_dropdata;
pub type dtrace_handle_drop_f =
    unsafe extern "C" fn(arg1: *const dtrace_dropdata_t,
                         arg2: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
pub type dtrace_handle_proc_f =
    unsafe extern "C" fn(arg1: *mut ps_prochandle,
                         arg2: *const ::std::os::raw::c_char,
                         arg3: *mut ::std::os::raw::c_void);
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dtrace_bufdata {
    pub dtbda_handle: *mut dtrace_hdl_t,
    pub dtbda_buffered: *const ::std::os::raw::c_char,
    pub dtbda_probe: *mut dtrace_probedata_t,
    pub dtbda_recdesc: *const dtrace_recdesc_t,
    pub dtbda_aggdata: *const dtrace_aggdata_t,
    pub dtbda_flags: uint32_t,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for dtrace_bufdata {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_bufdata_t = dtrace_bufdata;
pub type dtrace_handle_buffered_f =
    unsafe extern "C" fn(arg1: *const dtrace_bufdata_t,
                         arg2: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dtrace_setoptdata {
    pub dtsda_handle: *mut dtrace_hdl_t,
    pub dtsda_probe: *const dtrace_probedata_t,
    pub dtsda_option: *const ::std::os::raw::c_char,
    pub dtsda_oldval: dtrace_optval_t,
    pub dtsda_newval: dtrace_optval_t,
}
impl ::std::default::Default for dtrace_setoptdata {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_setoptdata_t = dtrace_setoptdata;
pub type dtrace_handle_setopt_f =
    unsafe extern "C" fn(arg1: *const dtrace_setoptdata_t,
                         arg2: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dtrace_aggdata {
    pub dtada_handle: *mut dtrace_hdl_t,
    pub dtada_desc: *mut dtrace_aggdesc_t,
    pub dtada_edesc: *mut dtrace_eprobedesc_t,
    pub dtada_pdesc: *mut dtrace_probedesc_t,
    pub dtada_data: caddr_t,
    pub dtada_normal: uint64_t,
    pub dtada_size: size_t,
    pub dtada_delta: caddr_t,
    pub dtada_percpu: *mut caddr_t,
    pub dtada_percpu_delta: *mut caddr_t,
    pub dtada_total: int64_t,
    pub dtada_minbin: uint16_t,
    pub dtada_maxbin: uint16_t,
    pub dtada_flags: uint32_t,
}
impl ::std::default::Default for dtrace_aggdata {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_aggregate_f =
    unsafe extern "C" fn(arg1: *const dtrace_aggdata_t,
                         arg2: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
pub type dtrace_aggregate_walk_f =
    unsafe extern "C" fn(arg1: *mut dtrace_hdl_t,
                         arg2: *mut dtrace_aggregate_f,
                         arg3: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
pub type dtrace_aggregate_walk_joined_f =
    unsafe extern "C" fn(arg1: *mut *const dtrace_aggdata_t,
                         arg2: ::std::os::raw::c_int,
                         arg3: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dtrace_objinfo {
    pub dto_name: *const ::std::os::raw::c_char,
    pub dto_file: *const ::std::os::raw::c_char,
    pub dto_id: ::std::os::raw::c_int,
    pub dto_flags: uint_t,
    pub dto_text_va: GElf_Addr,
    pub dto_text_size: GElf_Xword,
    pub dto_data_va: GElf_Addr,
    pub dto_data_size: GElf_Xword,
    pub dto_bss_va: GElf_Addr,
    pub dto_bss_size: GElf_Xword,
}
impl ::std::default::Default for dtrace_objinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_objinfo_t = dtrace_objinfo;
pub type dtrace_obj_f =
    unsafe extern "C" fn(arg1: *mut dtrace_hdl_t,
                         arg2: *const dtrace_objinfo_t,
                         arg3: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dtrace_syminfo {
    pub dts_object: *const ::std::os::raw::c_char,
    pub dts_name: *const ::std::os::raw::c_char,
    pub dts_id: ulong_t,
}
impl ::std::default::Default for dtrace_syminfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_syminfo_t = dtrace_syminfo;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dtrace_typeinfo {
    pub dtt_object: *const ::std::os::raw::c_char,
    pub dtt_ctfp: *mut ctf_file_t,
    pub dtt_type: ctf_id_t,
    pub dtt_flags: uint_t,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for dtrace_typeinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_typeinfo_t = dtrace_typeinfo;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dtrace_probeinfo {
    pub dtp_attr: dtrace_attribute_t,
    pub dtp_arga: dtrace_attribute_t,
    pub dtp_argv: *const dtrace_typeinfo_t,
    pub dtp_argc: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for dtrace_probeinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dtrace_probeinfo_t = dtrace_probeinfo;
pub type dtrace_probe_f =
    unsafe extern "C" fn(arg1: *mut dtrace_hdl_t,
                         arg2: *const dtrace_probedesc_t,
                         arg3: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dtrace_vector {
    pub dtv_ioctl: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut ::std::os::raw::c_void,
                                                              arg2: u_long,
                                                              arg3:
                                                                  *mut ::std::os::raw::c_void)
                                             -> ::std::os::raw::c_int>,
    pub dtv_lookup_by_addr: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut ::std::os::raw::c_void,
                                                                       arg2:
                                                                           GElf_Addr,
                                                                       arg3:
                                                                           *mut GElf_Sym,
                                                                       arg4:
                                                                           *mut dtrace_syminfo_t)
                                                      ->
                                                          ::std::os::raw::c_int>,
    pub dtv_status: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut ::std::os::raw::c_void,
                                                               arg2:
                                                                   processorid_t)
                                              -> ::std::os::raw::c_int>,
    pub dtv_sysconf: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut ::std::os::raw::c_void,
                                                                arg2:
                                                                    ::std::os::raw::c_int)
                                               -> ::std::os::raw::c_long>,
}
impl ::std::default::Default for dtrace_vector {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for __va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static mut __stdinp: *mut FILE;
    pub static mut __stdoutp: *mut FILE;
    pub static mut __stderrp: *mut FILE;
    pub static sys_nerr: ::std::os::raw::c_int;
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
    pub static mut __isthreaded: ::std::os::raw::c_int;
    pub static _dtrace_version: *const ::std::os::raw::c_char;
    pub static mut _dtrace_debug: ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(arg1: ::std::os::raw::c_int, arg2: *mut fd_set,
                   arg3: *mut fd_set, arg4: *mut fd_set,
                   arg5: *const timespec, arg6: *const sigset_t)
     -> ::std::os::raw::c_int;
    pub fn select(arg1: ::std::os::raw::c_int, arg2: *mut fd_set,
                  arg3: *mut fd_set, arg4: *mut fd_set, arg5: *mut timeval)
     -> ::std::os::raw::c_int;
    pub fn ftruncate(arg1: ::std::os::raw::c_int, arg2: off_t)
     -> ::std::os::raw::c_int;
    pub fn lseek(arg1: ::std::os::raw::c_int, arg2: off_t,
                 arg3: ::std::os::raw::c_int) -> off_t;
    pub fn mmap(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                arg3: ::std::os::raw::c_int, arg4: ::std::os::raw::c_int,
                arg5: ::std::os::raw::c_int, arg6: off_t)
     -> *mut ::std::os::raw::c_void;
    pub fn truncate(arg1: *const ::std::os::raw::c_char, arg2: off_t)
     -> ::std::os::raw::c_int;
    pub fn signal(arg1: ::std::os::raw::c_int, arg2: *mut __sighandler_t)
     -> *mut __sighandler_t;
    pub fn kldload(_file: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn kldunload(_fileid: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn kldunloadf(_fileid: ::std::os::raw::c_int,
                      flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn kldfind(_file: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn kldnext(_fileid: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn kldstat(_fileid: ::std::os::raw::c_int, _stat: *mut kld_file_stat)
     -> ::std::os::raw::c_int;
    pub fn kldfirstmod(_fileid: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn kldsym(_fileid: ::std::os::raw::c_int, _cmd: ::std::os::raw::c_int,
                  _data: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn p_online(processorid: processorid_t, flag: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn processor_info(processorid: processorid_t,
                          infop: *mut processor_info_t)
     -> ::std::os::raw::c_int;
    pub fn processor_bind(idtype: idtype_t, id: id_t,
                          processorid: processorid_t,
                          obind: *mut processorid_t) -> ::std::os::raw::c_int;
    pub fn getcpuid() -> processorid_t;
    pub fn gethomelgroup() -> lgrpid_t;
    pub fn ioctl(arg1: ::std::os::raw::c_int,
                 arg2: ::std::os::raw::c_ulong, ...) -> ::std::os::raw::c_int;
    pub fn audit(arg1: *const ::std::os::raw::c_void,
                 arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn auditon(arg1: ::std::os::raw::c_int,
                   arg2: *mut ::std::os::raw::c_void,
                   arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn auditctl(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn getauid(arg1: *mut au_id_t) -> ::std::os::raw::c_int;
    pub fn setauid(arg1: *const au_id_t) -> ::std::os::raw::c_int;
    pub fn getaudit(arg1: *mut auditinfo) -> ::std::os::raw::c_int;
    pub fn setaudit(arg1: *const auditinfo) -> ::std::os::raw::c_int;
    pub fn getaudit_addr(arg1: *mut auditinfo_addr,
                         arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn setaudit_addr(arg1: *const auditinfo_addr,
                         arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ctf_bufopen(arg1: *const ctf_sect_t, arg2: *const ctf_sect_t,
                       arg3: *const ctf_sect_t,
                       arg4: *mut ::std::os::raw::c_int) -> *mut ctf_file_t;
    pub fn ctf_fdopen(arg1: ::std::os::raw::c_int,
                      arg2: *mut ::std::os::raw::c_int) -> *mut ctf_file_t;
    pub fn ctf_open(arg1: *const ::std::os::raw::c_char,
                    arg2: *mut ::std::os::raw::c_int) -> *mut ctf_file_t;
    pub fn ctf_create(arg1: *mut ::std::os::raw::c_int) -> *mut ctf_file_t;
    pub fn ctf_dup(arg1: *mut ctf_file_t) -> *mut ctf_file_t;
    pub fn ctf_close(arg1: *mut ctf_file_t);
    pub fn ctf_parent_file(arg1: *mut ctf_file_t) -> *mut ctf_file_t;
    pub fn ctf_parent_name(arg1: *mut ctf_file_t)
     -> *const ::std::os::raw::c_char;
    pub fn ctf_import(arg1: *mut ctf_file_t, arg2: *mut ctf_file_t)
     -> ::std::os::raw::c_int;
    pub fn ctf_setmodel(arg1: *mut ctf_file_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ctf_getmodel(arg1: *mut ctf_file_t) -> ::std::os::raw::c_int;
    pub fn ctf_setspecific(arg1: *mut ctf_file_t,
                           arg2: *mut ::std::os::raw::c_void);
    pub fn ctf_getspecific(arg1: *mut ctf_file_t)
     -> *mut ::std::os::raw::c_void;
    pub fn ctf_errno(arg1: *mut ctf_file_t) -> ::std::os::raw::c_int;
    pub fn ctf_errmsg(arg1: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn ctf_version(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ctf_func_info(arg1: *mut ctf_file_t, arg2: ulong_t,
                         arg3: *mut ctf_funcinfo_t) -> ::std::os::raw::c_int;
    pub fn ctf_func_args(arg1: *mut ctf_file_t, arg2: ulong_t, arg3: uint_t,
                         arg4: *mut ctf_id_t) -> ::std::os::raw::c_int;
    pub fn ctf_lookup_by_name(arg1: *mut ctf_file_t,
                              arg2: *const ::std::os::raw::c_char)
     -> ctf_id_t;
    pub fn ctf_lookup_by_symbol(arg1: *mut ctf_file_t, arg2: ulong_t)
     -> ctf_id_t;
    pub fn ctf_type_resolve(arg1: *mut ctf_file_t, arg2: ctf_id_t)
     -> ctf_id_t;
    pub fn ctf_type_lname(arg1: *mut ctf_file_t, arg2: ctf_id_t,
                          arg3: *mut ::std::os::raw::c_char, arg4: size_t)
     -> ssize_t;
    pub fn ctf_type_name(arg1: *mut ctf_file_t, arg2: ctf_id_t,
                         arg3: *mut ::std::os::raw::c_char, arg4: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn ctf_type_qname(arg1: *mut ctf_file_t, arg2: ctf_id_t,
                          arg3: *mut ::std::os::raw::c_char, arg4: size_t,
                          arg5: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn ctf_type_size(arg1: *mut ctf_file_t, arg2: ctf_id_t) -> ssize_t;
    pub fn ctf_type_align(arg1: *mut ctf_file_t, arg2: ctf_id_t) -> ssize_t;
    pub fn ctf_type_kind(arg1: *mut ctf_file_t, arg2: ctf_id_t)
     -> ::std::os::raw::c_int;
    pub fn ctf_type_reference(arg1: *mut ctf_file_t, arg2: ctf_id_t)
     -> ctf_id_t;
    pub fn ctf_type_pointer(arg1: *mut ctf_file_t, arg2: ctf_id_t)
     -> ctf_id_t;
    pub fn ctf_type_encoding(arg1: *mut ctf_file_t, arg2: ctf_id_t,
                             arg3: *mut ctf_encoding_t)
     -> ::std::os::raw::c_int;
    pub fn ctf_type_visit(arg1: *mut ctf_file_t, arg2: ctf_id_t,
                          arg3: *mut ctf_visit_f,
                          arg4: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn ctf_type_cmp(arg1: *mut ctf_file_t, arg2: ctf_id_t,
                        arg3: *mut ctf_file_t, arg4: ctf_id_t)
     -> ::std::os::raw::c_int;
    pub fn ctf_type_compat(arg1: *mut ctf_file_t, arg2: ctf_id_t,
                           arg3: *mut ctf_file_t, arg4: ctf_id_t)
     -> ::std::os::raw::c_int;
    pub fn ctf_member_info(arg1: *mut ctf_file_t, arg2: ctf_id_t,
                           arg3: *const ::std::os::raw::c_char,
                           arg4: *mut ctf_membinfo_t)
     -> ::std::os::raw::c_int;
    pub fn ctf_array_info(arg1: *mut ctf_file_t, arg2: ctf_id_t,
                          arg3: *mut ctf_arinfo_t) -> ::std::os::raw::c_int;
    pub fn ctf_enum_name(arg1: *mut ctf_file_t, arg2: ctf_id_t,
                         arg3: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn ctf_enum_value(arg1: *mut ctf_file_t, arg2: ctf_id_t,
                          arg3: *const ::std::os::raw::c_char,
                          arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ctf_label_topmost(arg1: *mut ctf_file_t)
     -> *const ::std::os::raw::c_char;
    pub fn ctf_label_info(arg1: *mut ctf_file_t,
                          arg2: *const ::std::os::raw::c_char,
                          arg3: *mut ctf_lblinfo_t) -> ::std::os::raw::c_int;
    pub fn ctf_member_iter(arg1: *mut ctf_file_t, arg2: ctf_id_t,
                           arg3: *mut ctf_member_f,
                           arg4: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn ctf_enum_iter(arg1: *mut ctf_file_t, arg2: ctf_id_t,
                         arg3: *mut ctf_enum_f,
                         arg4: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn ctf_type_iter(arg1: *mut ctf_file_t, arg2: *mut ctf_type_f,
                         arg3: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn ctf_label_iter(arg1: *mut ctf_file_t, arg2: *mut ctf_label_f,
                          arg3: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn ctf_add_array(arg1: *mut ctf_file_t, arg2: uint_t,
                         arg3: *const ctf_arinfo_t) -> ctf_id_t;
    pub fn ctf_add_const(arg1: *mut ctf_file_t, arg2: uint_t, arg3: ctf_id_t)
     -> ctf_id_t;
    pub fn ctf_add_enum(arg1: *mut ctf_file_t, arg2: uint_t,
                        arg3: *const ::std::os::raw::c_char) -> ctf_id_t;
    pub fn ctf_add_float(arg1: *mut ctf_file_t, arg2: uint_t,
                         arg3: *const ::std::os::raw::c_char,
                         arg4: *const ctf_encoding_t) -> ctf_id_t;
    pub fn ctf_add_forward(arg1: *mut ctf_file_t, arg2: uint_t,
                           arg3: *const ::std::os::raw::c_char, arg4: uint_t)
     -> ctf_id_t;
    pub fn ctf_add_function(arg1: *mut ctf_file_t, arg2: uint_t,
                            arg3: *const ctf_funcinfo_t,
                            arg4: *const ctf_id_t) -> ctf_id_t;
    pub fn ctf_add_integer(arg1: *mut ctf_file_t, arg2: uint_t,
                           arg3: *const ::std::os::raw::c_char,
                           arg4: *const ctf_encoding_t) -> ctf_id_t;
    pub fn ctf_add_pointer(arg1: *mut ctf_file_t, arg2: uint_t,
                           arg3: ctf_id_t) -> ctf_id_t;
    pub fn ctf_add_type(arg1: *mut ctf_file_t, arg2: *mut ctf_file_t,
                        arg3: ctf_id_t) -> ctf_id_t;
    pub fn ctf_add_typedef(arg1: *mut ctf_file_t, arg2: uint_t,
                           arg3: *const ::std::os::raw::c_char,
                           arg4: ctf_id_t) -> ctf_id_t;
    pub fn ctf_add_restrict(arg1: *mut ctf_file_t, arg2: uint_t,
                            arg3: ctf_id_t) -> ctf_id_t;
    pub fn ctf_add_struct(arg1: *mut ctf_file_t, arg2: uint_t,
                          arg3: *const ::std::os::raw::c_char) -> ctf_id_t;
    pub fn ctf_add_union(arg1: *mut ctf_file_t, arg2: uint_t,
                         arg3: *const ::std::os::raw::c_char) -> ctf_id_t;
    pub fn ctf_add_volatile(arg1: *mut ctf_file_t, arg2: uint_t,
                            arg3: ctf_id_t) -> ctf_id_t;
    pub fn ctf_add_enumerator(arg1: *mut ctf_file_t, arg2: ctf_id_t,
                              arg3: *const ::std::os::raw::c_char,
                              arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ctf_add_member(arg1: *mut ctf_file_t, arg2: ctf_id_t,
                          arg3: *const ::std::os::raw::c_char, arg4: ctf_id_t)
     -> ::std::os::raw::c_int;
    pub fn ctf_set_array(arg1: *mut ctf_file_t, arg2: ctf_id_t,
                         arg3: *const ctf_arinfo_t) -> ::std::os::raw::c_int;
    pub fn ctf_delete_type(arg1: *mut ctf_file_t, arg2: ctf_id_t)
     -> ::std::os::raw::c_int;
    pub fn ctf_update(arg1: *mut ctf_file_t) -> ::std::os::raw::c_int;
    pub fn ctf_discard(arg1: *mut ctf_file_t) -> ::std::os::raw::c_int;
    pub fn ctf_write(arg1: *mut ctf_file_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn clearerr(arg1: *mut FILE);
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t)
     -> ::std::os::raw::c_int;
    pub fn fgets(arg1: *mut ::std::os::raw::c_char,
                 arg2: ::std::os::raw::c_int, arg3: *mut FILE)
     -> *mut ::std::os::raw::c_char;
    pub fn fopen(arg1: *const ::std::os::raw::c_char,
                 arg2: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn fprintf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fread(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                 arg3: size_t, arg4: *mut FILE) -> size_t;
    pub fn freopen(arg1: *const ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, arg3: *mut FILE)
     -> *mut FILE;
    pub fn fscanf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn fseek(arg1: *mut FILE, arg2: ::std::os::raw::c_long,
                 arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t)
     -> ::std::os::raw::c_int;
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
    pub fn fwrite(arg1: *const ::std::os::raw::c_void, arg2: size_t,
                  arg3: size_t, arg4: *mut FILE) -> size_t;
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar() -> ::std::os::raw::c_int;
    pub fn gets(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn perror(arg1: *const ::std::os::raw::c_char);
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn remove(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rename(arg1: *const ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rewind(arg1: *mut FILE);
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
    pub fn setvbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char,
                   arg3: ::std::os::raw::c_int, arg4: size_t)
     -> ::std::os::raw::c_int;
    pub fn sprintf(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sscanf(arg1: *const ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn vfprintf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char,
                    arg3: __va_list) -> ::std::os::raw::c_int;
    pub fn vprintf(arg1: *const ::std::os::raw::c_char, arg2: __va_list)
     -> ::std::os::raw::c_int;
    pub fn vsprintf(arg1: *mut ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char, arg3: __va_list)
     -> ::std::os::raw::c_int;
    pub fn snprintf(arg1: *mut ::std::os::raw::c_char, arg2: size_t,
                    arg3: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfscanf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char,
                   arg3: __va_list) -> ::std::os::raw::c_int;
    pub fn vscanf(arg1: *const ::std::os::raw::c_char, arg2: __va_list)
     -> ::std::os::raw::c_int;
    pub fn vsnprintf(arg1: *mut ::std::os::raw::c_char, arg2: size_t,
                     arg3: *const ::std::os::raw::c_char, arg4: __va_list)
     -> ::std::os::raw::c_int;
    pub fn vsscanf(arg1: *const ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, arg3: __va_list)
     -> ::std::os::raw::c_int;
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn fdopen(arg1: ::std::os::raw::c_int,
                  arg2: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn popen(arg1: *const ::std::os::raw::c_char,
                 arg2: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn flockfile(arg1: *mut FILE);
    pub fn funlockfile(arg1: *mut FILE);
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn clearerr_unlocked(arg1: *mut FILE);
    pub fn feof_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fileno_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fseeko(arg1: *mut FILE, arg2: __off_t, arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ftello(arg1: *mut FILE) -> __off_t;
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn tempnam(arg1: *const ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn fmemopen(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                    arg3: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn getdelim(arg1: *mut *mut ::std::os::raw::c_char, arg2: *mut size_t,
                    arg3: ::std::os::raw::c_int, arg4: *mut FILE) -> ssize_t;
    pub fn open_memstream(arg1: *mut *mut ::std::os::raw::c_char,
                          arg2: *mut size_t) -> *mut FILE;
    pub fn renameat(arg1: ::std::os::raw::c_int,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int,
                    arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn vdprintf(arg1: ::std::os::raw::c_int,
                    arg2: *const ::std::os::raw::c_char, arg3: __va_list)
     -> ::std::os::raw::c_int;
    pub fn asprintf(arg1: *mut *mut ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn fcloseall();
    pub fn fdclose(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn fgetln(arg1: *mut FILE, arg2: *mut size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn fmtcheck(arg1: *const ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn setbuffer(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char,
                     arg3: ::std::os::raw::c_int);
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn vasprintf(arg1: *mut *mut ::std::os::raw::c_char,
                     arg2: *const ::std::os::raw::c_char, arg3: __va_list)
     -> ::std::os::raw::c_int;
    pub fn funopen(arg1: *const ::std::os::raw::c_void,
                   arg2:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *mut ::std::os::raw::c_char,
                                                                  arg3:
                                                                      ::std::os::raw::c_int)
                                                 -> ::std::os::raw::c_int>,
                   arg3:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *const ::std::os::raw::c_char,
                                                                  arg3:
                                                                      ::std::os::raw::c_int)
                                                 -> ::std::os::raw::c_int>,
                   arg4:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      fpos_t,
                                                                  arg3:
                                                                      ::std::os::raw::c_int)
                                                 -> fpos_t>,
                   arg5:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>)
     -> *mut FILE;
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn elf_begin(_fd: ::std::os::raw::c_int, _cmd: Elf_Cmd,
                     _elf: *mut Elf) -> *mut Elf;
    pub fn elf_cntl(_elf: *mut Elf, _cmd: Elf_Cmd) -> ::std::os::raw::c_int;
    pub fn elf_end(_elf: *mut Elf) -> ::std::os::raw::c_int;
    pub fn elf_errmsg(_error: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn elf_errno() -> ::std::os::raw::c_int;
    pub fn elf_fill(_fill: ::std::os::raw::c_int);
    pub fn elf_flagarhdr(_arh: *mut Elf_Arhdr, _cmd: Elf_Cmd,
                         _flags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
    pub fn elf_flagdata(_data: *mut Elf_Data, _cmd: Elf_Cmd,
                        _flags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
    pub fn elf_flagehdr(_elf: *mut Elf, _cmd: Elf_Cmd,
                        _flags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
    pub fn elf_flagelf(_elf: *mut Elf, _cmd: Elf_Cmd,
                       _flags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
    pub fn elf_flagphdr(_elf: *mut Elf, _cmd: Elf_Cmd,
                        _flags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
    pub fn elf_flagscn(_scn: *mut Elf_Scn, _cmd: Elf_Cmd,
                       _flags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
    pub fn elf_flagshdr(_scn: *mut Elf_Scn, _cmd: Elf_Cmd,
                        _flags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
    pub fn elf_getarhdr(_elf: *mut Elf) -> *mut Elf_Arhdr;
    pub fn elf_getarsym(_elf: *mut Elf, _ptr: *mut size_t) -> *mut Elf_Arsym;
    pub fn elf_getbase(_elf: *mut Elf) -> off_t;
    pub fn elf_getdata(arg1: *mut Elf_Scn, arg2: *mut Elf_Data)
     -> *mut Elf_Data;
    pub fn elf_getident(_elf: *mut Elf, _ptr: *mut size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn elf_getphdrnum(_elf: *mut Elf, _dst: *mut size_t)
     -> ::std::os::raw::c_int;
    pub fn elf_getphnum(_elf: *mut Elf, _dst: *mut size_t)
     -> ::std::os::raw::c_int;
    pub fn elf_getscn(_elf: *mut Elf, _index: size_t) -> *mut Elf_Scn;
    pub fn elf_getshdrnum(_elf: *mut Elf, _dst: *mut size_t)
     -> ::std::os::raw::c_int;
    pub fn elf_getshnum(_elf: *mut Elf, _dst: *mut size_t)
     -> ::std::os::raw::c_int;
    pub fn elf_getshdrstrndx(_elf: *mut Elf, _dst: *mut size_t)
     -> ::std::os::raw::c_int;
    pub fn elf_getshstrndx(_elf: *mut Elf, _dst: *mut size_t)
     -> ::std::os::raw::c_int;
    pub fn elf_hash(_name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
    pub fn elf_kind(_elf: *mut Elf) -> Elf_Kind;
    pub fn elf_memory(_image: *mut ::std::os::raw::c_char, _size: size_t)
     -> *mut Elf;
    pub fn elf_ndxscn(_scn: *mut Elf_Scn) -> size_t;
    pub fn elf_newdata(_scn: *mut Elf_Scn) -> *mut Elf_Data;
    pub fn elf_newscn(_elf: *mut Elf) -> *mut Elf_Scn;
    pub fn elf_nextscn(_elf: *mut Elf, _scn: *mut Elf_Scn) -> *mut Elf_Scn;
    pub fn elf_next(_elf: *mut Elf) -> Elf_Cmd;
    pub fn elf_open(_fd: ::std::os::raw::c_int) -> *mut Elf;
    pub fn elf_openmemory(_image: *mut ::std::os::raw::c_char, _size: size_t)
     -> *mut Elf;
    pub fn elf_rand(_elf: *mut Elf, _off: off_t) -> off_t;
    pub fn elf_rawdata(_scn: *mut Elf_Scn, _data: *mut Elf_Data)
     -> *mut Elf_Data;
    pub fn elf_rawfile(_elf: *mut Elf, _size: *mut size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn elf_setshstrndx(_elf: *mut Elf, _shnum: size_t)
     -> ::std::os::raw::c_int;
    pub fn elf_strptr(_elf: *mut Elf, _section: size_t, _offset: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn elf_update(_elf: *mut Elf, _cmd: Elf_Cmd) -> off_t;
    pub fn elf_version(_version: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
    pub fn elf32_checksum(_elf: *mut Elf) -> ::std::os::raw::c_long;
    pub fn elf32_fsize(_type: Elf_Type, _count: size_t,
                       _version: ::std::os::raw::c_uint) -> size_t;
    pub fn elf32_getehdr(_elf: *mut Elf) -> *mut Elf32_Ehdr;
    pub fn elf32_getphdr(_elf: *mut Elf) -> *mut Elf32_Phdr;
    pub fn elf32_getshdr(_scn: *mut Elf_Scn) -> *mut Elf32_Shdr;
    pub fn elf32_newehdr(_elf: *mut Elf) -> *mut Elf32_Ehdr;
    pub fn elf32_newphdr(_elf: *mut Elf, _count: size_t) -> *mut Elf32_Phdr;
    pub fn elf32_xlatetof(_dst: *mut Elf_Data, _src: *const Elf_Data,
                          _enc: ::std::os::raw::c_uint) -> *mut Elf_Data;
    pub fn elf32_xlatetom(_dst: *mut Elf_Data, _src: *const Elf_Data,
                          _enc: ::std::os::raw::c_uint) -> *mut Elf_Data;
    pub fn elf64_checksum(_elf: *mut Elf) -> ::std::os::raw::c_long;
    pub fn elf64_fsize(_type: Elf_Type, _count: size_t,
                       _version: ::std::os::raw::c_uint) -> size_t;
    pub fn elf64_getehdr(_elf: *mut Elf) -> *mut Elf64_Ehdr;
    pub fn elf64_getphdr(_elf: *mut Elf) -> *mut Elf64_Phdr;
    pub fn elf64_getshdr(_scn: *mut Elf_Scn) -> *mut Elf64_Shdr;
    pub fn elf64_newehdr(_elf: *mut Elf) -> *mut Elf64_Ehdr;
    pub fn elf64_newphdr(_elf: *mut Elf, _count: size_t) -> *mut Elf64_Phdr;
    pub fn elf64_xlatetof(_dst: *mut Elf_Data, _src: *const Elf_Data,
                          _enc: ::std::os::raw::c_uint) -> *mut Elf_Data;
    pub fn elf64_xlatetom(_dst: *mut Elf_Data, _src: *const Elf_Data,
                          _enc: ::std::os::raw::c_uint) -> *mut Elf_Data;
    pub fn gelf_checksum(_elf: *mut Elf) -> ::std::os::raw::c_long;
    pub fn gelf_fsize(_elf: *mut Elf, _type: Elf_Type, _count: size_t,
                      _version: ::std::os::raw::c_uint) -> size_t;
    pub fn gelf_getclass(_elf: *mut Elf) -> ::std::os::raw::c_int;
    pub fn gelf_getdyn(_data: *mut Elf_Data, _index: ::std::os::raw::c_int,
                       _dst: *mut GElf_Dyn) -> *mut GElf_Dyn;
    pub fn gelf_getehdr(_elf: *mut Elf, _dst: *mut GElf_Ehdr)
     -> *mut GElf_Ehdr;
    pub fn gelf_getphdr(_elf: *mut Elf, _index: ::std::os::raw::c_int,
                        _dst: *mut GElf_Phdr) -> *mut GElf_Phdr;
    pub fn gelf_getrel(_src: *mut Elf_Data, _index: ::std::os::raw::c_int,
                       _dst: *mut GElf_Rel) -> *mut GElf_Rel;
    pub fn gelf_getrela(_src: *mut Elf_Data, _index: ::std::os::raw::c_int,
                        _dst: *mut GElf_Rela) -> *mut GElf_Rela;
    pub fn gelf_getshdr(_scn: *mut Elf_Scn, _dst: *mut GElf_Shdr)
     -> *mut GElf_Shdr;
    pub fn gelf_getsym(_src: *mut Elf_Data, _index: ::std::os::raw::c_int,
                       _dst: *mut GElf_Sym) -> *mut GElf_Sym;
    pub fn gelf_getsymshndx(_src: *mut Elf_Data, _shindexsrc: *mut Elf_Data,
                            _index: ::std::os::raw::c_int,
                            _dst: *mut GElf_Sym, _shindexdst: *mut Elf32_Word)
     -> *mut GElf_Sym;
    pub fn gelf_newehdr(_elf: *mut Elf, _class: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn gelf_newphdr(_elf: *mut Elf, _phnum: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn gelf_update_dyn(_dst: *mut Elf_Data, _index: ::std::os::raw::c_int,
                           _src: *mut GElf_Dyn) -> ::std::os::raw::c_int;
    pub fn gelf_update_ehdr(_elf: *mut Elf, _src: *mut GElf_Ehdr)
     -> ::std::os::raw::c_int;
    pub fn gelf_update_phdr(_elf: *mut Elf, _index: ::std::os::raw::c_int,
                            _src: *mut GElf_Phdr) -> ::std::os::raw::c_int;
    pub fn gelf_update_rel(_dst: *mut Elf_Data, _index: ::std::os::raw::c_int,
                           _src: *mut GElf_Rel) -> ::std::os::raw::c_int;
    pub fn gelf_update_rela(_dst: *mut Elf_Data,
                            _index: ::std::os::raw::c_int,
                            _src: *mut GElf_Rela) -> ::std::os::raw::c_int;
    pub fn gelf_update_shdr(_dst: *mut Elf_Scn, _src: *mut GElf_Shdr)
     -> ::std::os::raw::c_int;
    pub fn gelf_update_sym(_dst: *mut Elf_Data, _index: ::std::os::raw::c_int,
                           _src: *mut GElf_Sym) -> ::std::os::raw::c_int;
    pub fn gelf_update_symshndx(_symdst: *mut Elf_Data,
                                _shindexdst: *mut Elf_Data,
                                _index: ::std::os::raw::c_int,
                                _symsrc: *mut GElf_Sym,
                                _shindexsrc: Elf32_Word)
     -> ::std::os::raw::c_int;
    pub fn gelf_xlatetof(_elf: *mut Elf, _dst: *mut Elf_Data,
                         _src: *const Elf_Data,
                         _encode: ::std::os::raw::c_uint) -> *mut Elf_Data;
    pub fn gelf_xlatetom(_elf: *mut Elf, _dst: *mut Elf_Data,
                         _src: *const Elf_Data,
                         _encode: ::std::os::raw::c_uint) -> *mut Elf_Data;
    pub fn gelf_getcap(_data: *mut Elf_Data, _index: ::std::os::raw::c_int,
                       _cap: *mut GElf_Cap) -> *mut GElf_Cap;
    pub fn gelf_getmove(_src: *mut Elf_Data, _index: ::std::os::raw::c_int,
                        _dst: *mut GElf_Move) -> *mut GElf_Move;
    pub fn gelf_getsyminfo(_src: *mut Elf_Data, _index: ::std::os::raw::c_int,
                           _dst: *mut GElf_Syminfo) -> *mut GElf_Syminfo;
    pub fn gelf_update_cap(_dst: *mut Elf_Data, _index: ::std::os::raw::c_int,
                           _src: *mut GElf_Cap) -> ::std::os::raw::c_int;
    pub fn gelf_update_move(_dst: *mut Elf_Data,
                            _index: ::std::os::raw::c_int,
                            _src: *mut GElf_Move) -> ::std::os::raw::c_int;
    pub fn gelf_update_syminfo(_dst: *mut Elf_Data,
                               _index: ::std::os::raw::c_int,
                               _src: *mut GElf_Syminfo)
     -> ::std::os::raw::c_int;
    pub fn rd_delete(arg1: *mut rd_agent_t);
    pub fn rd_errstr(arg1: rd_err_e) -> *const ::std::os::raw::c_char;
    pub fn rd_event_addr(arg1: *mut rd_agent_t, arg2: rd_event_e,
                         arg3: *mut rd_notify_t) -> rd_err_e;
    pub fn rd_event_enable(arg1: *mut rd_agent_t, arg2: ::std::os::raw::c_int)
     -> rd_err_e;
    pub fn rd_event_getmsg(arg1: *mut rd_agent_t, arg2: *mut rd_event_msg_t)
     -> rd_err_e;
    pub fn rd_init(arg1: ::std::os::raw::c_int) -> rd_err_e;
    pub fn rd_loadobj_iter(arg1: *mut rd_agent_t, arg2: *mut rl_iter_f,
                           arg3: *mut ::std::os::raw::c_void) -> rd_err_e;
    pub fn rd_log(arg1: ::std::os::raw::c_int);
    pub fn rd_new(arg1: *mut proc_handle) -> *mut rd_agent_t;
    pub fn rd_objpad_enable(arg1: *mut rd_agent_t, arg2: size_t) -> rd_err_e;
    pub fn rd_plt_resolution(arg1: *mut rd_agent_t, arg2: uintptr_t,
                             arg3: *mut proc_, arg4: uintptr_t,
                             arg5: *mut rd_plt_info_t) -> rd_err_e;
    pub fn rd_reset(arg1: *mut rd_agent_t) -> rd_err_e;
    pub fn proc_addr2map(arg1: *mut proc_handle, arg2: uintptr_t)
     -> *mut prmap_t;
    pub fn proc_name2map(arg1: *mut proc_handle,
                         arg2: *const ::std::os::raw::c_char) -> *mut prmap_t;
    pub fn proc_objname(arg1: *mut proc_handle, arg2: uintptr_t,
                        arg3: *mut ::std::os::raw::c_char, arg4: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn proc_obj2map(arg1: *mut proc_handle,
                        arg2: *const ::std::os::raw::c_char) -> *mut prmap_t;
    pub fn proc_iter_objs(arg1: *mut proc_handle, arg2: *mut proc_map_f,
                          arg3: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn proc_iter_symbyaddr(arg1: *mut proc_handle,
                               arg2: *const ::std::os::raw::c_char,
                               arg3: ::std::os::raw::c_int,
                               arg4: ::std::os::raw::c_int,
                               arg5: *mut proc_sym_f,
                               arg6: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn proc_addr2sym(arg1: *mut proc_handle, arg2: uintptr_t,
                         arg3: *mut ::std::os::raw::c_char, arg4: size_t,
                         arg5: *mut GElf_Sym) -> ::std::os::raw::c_int;
    pub fn proc_attach(pid: pid_t, flags: ::std::os::raw::c_int,
                       pphdl: *mut *mut proc_handle) -> ::std::os::raw::c_int;
    pub fn proc_continue(arg1: *mut proc_handle) -> ::std::os::raw::c_int;
    pub fn proc_clearflags(arg1: *mut proc_handle,
                           arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn proc_create(arg1: *const ::std::os::raw::c_char,
                       arg2: *const *mut ::std::os::raw::c_char,
                       arg3: *mut proc_child_func,
                       arg4: *mut ::std::os::raw::c_void,
                       arg5: *mut *mut proc_handle) -> ::std::os::raw::c_int;
    pub fn proc_detach(arg1: *mut proc_handle, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn proc_getflags(arg1: *mut proc_handle) -> ::std::os::raw::c_int;
    pub fn proc_name2sym(arg1: *mut proc_handle,
                         arg2: *const ::std::os::raw::c_char,
                         arg3: *const ::std::os::raw::c_char,
                         arg4: *mut GElf_Sym, arg5: *mut prsyminfo_t)
     -> ::std::os::raw::c_int;
    pub fn proc_name2ctf(arg1: *mut proc_handle,
                         arg2: *const ::std::os::raw::c_char)
     -> *mut ctf_file;
    pub fn proc_setflags(arg1: *mut proc_handle, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn proc_state(arg1: *mut proc_handle) -> ::std::os::raw::c_int;
    pub fn proc_getpid(arg1: *mut proc_handle) -> pid_t;
    pub fn proc_wstatus(arg1: *mut proc_handle) -> ::std::os::raw::c_int;
    pub fn proc_getwstat(arg1: *mut proc_handle) -> ::std::os::raw::c_int;
    pub fn proc_signame(arg1: ::std::os::raw::c_int,
                        arg2: *mut ::std::os::raw::c_char, arg3: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn proc_read(arg1: *mut proc_handle,
                     arg2: *mut ::std::os::raw::c_void, arg3: size_t,
                     arg4: size_t) -> ::std::os::raw::c_int;
    pub fn proc_getlwpstatus(arg1: *mut proc_handle) -> *const lwpstatus_t;
    pub fn proc_free(arg1: *mut proc_handle);
    pub fn proc_rdagent(arg1: *mut proc_handle) -> *mut rd_agent_t;
    pub fn proc_updatesyms(arg1: *mut proc_handle);
    pub fn proc_bkptset(arg1: *mut proc_handle, arg2: uintptr_t,
                        arg3: *mut ::std::os::raw::c_ulong)
     -> ::std::os::raw::c_int;
    pub fn proc_bkptdel(arg1: *mut proc_handle, arg2: uintptr_t,
                        arg3: ::std::os::raw::c_ulong)
     -> ::std::os::raw::c_int;
    pub fn proc_bkptregadj(arg1: *mut ::std::os::raw::c_ulong);
    pub fn proc_bkptexec(arg1: *mut proc_handle,
                         arg2: ::std::os::raw::c_ulong)
     -> ::std::os::raw::c_int;
    pub fn proc_regget(arg1: *mut proc_handle, arg2: proc_reg_t,
                       arg3: *mut ::std::os::raw::c_ulong)
     -> ::std::os::raw::c_int;
    pub fn proc_regset(arg1: *mut proc_handle, arg2: proc_reg_t,
                       arg3: ::std::os::raw::c_ulong)
     -> ::std::os::raw::c_int;
    pub fn dtrace_open(arg1: ::std::os::raw::c_int,
                       arg2: ::std::os::raw::c_int,
                       arg3: *mut ::std::os::raw::c_int) -> *mut dtrace_hdl_t;
    pub fn dtrace_vopen(arg1: ::std::os::raw::c_int,
                        arg2: ::std::os::raw::c_int,
                        arg3: *mut ::std::os::raw::c_int,
                        arg4: *const dtrace_vector_t,
                        arg5: *mut ::std::os::raw::c_void)
     -> *mut dtrace_hdl_t;
    pub fn dtrace_go(arg1: *mut dtrace_hdl_t) -> ::std::os::raw::c_int;
    pub fn dtrace_stop(arg1: *mut dtrace_hdl_t) -> ::std::os::raw::c_int;
    pub fn dtrace_sleep(arg1: *mut dtrace_hdl_t);
    pub fn dtrace_close(arg1: *mut dtrace_hdl_t);
    pub fn dtrace_errno(arg1: *mut dtrace_hdl_t) -> ::std::os::raw::c_int;
    pub fn dtrace_errmsg(arg1: *mut dtrace_hdl_t, arg2: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn dtrace_faultstr(arg1: *mut dtrace_hdl_t,
                           arg2: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn dtrace_subrstr(arg1: *mut dtrace_hdl_t,
                          arg2: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn dtrace_setopt(arg1: *mut dtrace_hdl_t,
                         arg2: *const ::std::os::raw::c_char,
                         arg3: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn dtrace_getopt(arg1: *mut dtrace_hdl_t,
                         arg2: *const ::std::os::raw::c_char,
                         arg3: *mut dtrace_optval_t) -> ::std::os::raw::c_int;
    pub fn dtrace_update(arg1: *mut dtrace_hdl_t);
    pub fn dtrace_ctlfd(arg1: *mut dtrace_hdl_t) -> ::std::os::raw::c_int;
    pub fn dtrace_program_strcompile(arg1: *mut dtrace_hdl_t,
                                     arg2: *const ::std::os::raw::c_char,
                                     arg3: dtrace_probespec_t, arg4: uint_t,
                                     arg5: ::std::os::raw::c_int,
                                     arg6: *const *const ::std::os::raw::c_char)
     -> *mut dtrace_prog_t;
    pub fn dtrace_program_fcompile(arg1: *mut dtrace_hdl_t, arg2: *mut FILE,
                                   arg3: uint_t, arg4: ::std::os::raw::c_int,
                                   arg5: *mut *mut ::std::os::raw::c_char)
     -> *mut dtrace_prog_t;
    pub fn dtrace_program_exec(arg1: *mut dtrace_hdl_t,
                               arg2: *mut dtrace_prog_t,
                               arg3: *mut dtrace_proginfo_t)
     -> ::std::os::raw::c_int;
    pub fn dtrace_program_info(arg1: *mut dtrace_hdl_t,
                               arg2: *mut dtrace_prog_t,
                               arg3: *mut dtrace_proginfo_t);
    pub fn dtrace_program_link(arg1: *mut dtrace_hdl_t,
                               arg2: *mut dtrace_prog_t, arg3: uint_t,
                               arg4: *const ::std::os::raw::c_char,
                               arg5: ::std::os::raw::c_int,
                               arg6: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn dtrace_program_header(arg1: *mut dtrace_hdl_t, arg2: *mut FILE,
                                 arg3: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn dtrace_dof_create(arg1: *mut dtrace_hdl_t,
                             arg2: *mut dtrace_prog_t, arg3: uint_t)
     -> *mut ::std::os::raw::c_void;
    pub fn dtrace_dof_destroy(arg1: *mut dtrace_hdl_t,
                              arg2: *mut ::std::os::raw::c_void);
    pub fn dtrace_getopt_dof(arg1: *mut dtrace_hdl_t)
     -> *mut ::std::os::raw::c_void;
    pub fn dtrace_geterr_dof(arg1: *mut dtrace_hdl_t)
     -> *mut ::std::os::raw::c_void;
    pub fn dtrace_stmt_create(arg1: *mut dtrace_hdl_t,
                              arg2: *mut dtrace_ecbdesc_t)
     -> *mut dtrace_stmtdesc_t;
    pub fn dtrace_stmt_action(arg1: *mut dtrace_hdl_t,
                              arg2: *mut dtrace_stmtdesc_t)
     -> *mut dtrace_actdesc_t;
    pub fn dtrace_stmt_add(arg1: *mut dtrace_hdl_t, arg2: *mut dtrace_prog_t,
                           arg3: *mut dtrace_stmtdesc_t)
     -> ::std::os::raw::c_int;
    pub fn dtrace_stmt_iter(arg1: *mut dtrace_hdl_t, arg2: *mut dtrace_prog_t,
                            arg3: *mut dtrace_stmt_f,
                            arg4: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn dtrace_stmt_destroy(arg1: *mut dtrace_hdl_t,
                               arg2: *mut dtrace_stmtdesc_t);
    pub fn dtrace_consume(arg1: *mut dtrace_hdl_t, arg2: *mut FILE,
                          arg3: *mut dtrace_consume_probe_f,
                          arg4: *mut dtrace_consume_rec_f,
                          arg5: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn dtrace_status(arg1: *mut dtrace_hdl_t) -> ::std::os::raw::c_int;
    pub fn dtrace_printf_create(arg1: *mut dtrace_hdl_t,
                                arg2: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_void;
    pub fn dtrace_printa_create(arg1: *mut dtrace_hdl_t,
                                arg2: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_void;
    pub fn dtrace_printf_format(arg1: *mut dtrace_hdl_t,
                                arg2: *mut ::std::os::raw::c_void,
                                arg3: *mut ::std::os::raw::c_char,
                                arg4: size_t) -> size_t;
    pub fn dtrace_fprintf(arg1: *mut dtrace_hdl_t, arg2: *mut FILE,
                          arg3: *mut ::std::os::raw::c_void,
                          arg4: *const dtrace_probedata_t,
                          arg5: *const dtrace_recdesc_t, arg6: uint_t,
                          arg7: *const ::std::os::raw::c_void, arg8: size_t)
     -> ::std::os::raw::c_int;
    pub fn dtrace_fprinta(arg1: *mut dtrace_hdl_t, arg2: *mut FILE,
                          arg3: *mut ::std::os::raw::c_void,
                          arg4: *const dtrace_probedata_t,
                          arg5: *const dtrace_recdesc_t, arg6: uint_t,
                          arg7: *const ::std::os::raw::c_void, arg8: size_t)
     -> ::std::os::raw::c_int;
    pub fn dtrace_system(arg1: *mut dtrace_hdl_t, arg2: *mut FILE,
                         arg3: *mut ::std::os::raw::c_void,
                         arg4: *const dtrace_probedata_t,
                         arg5: *const dtrace_recdesc_t, arg6: uint_t,
                         arg7: *const ::std::os::raw::c_void, arg8: size_t)
     -> ::std::os::raw::c_int;
    pub fn dtrace_freopen(arg1: *mut dtrace_hdl_t, arg2: *mut FILE,
                          arg3: *mut ::std::os::raw::c_void,
                          arg4: *const dtrace_probedata_t,
                          arg5: *const dtrace_recdesc_t, arg6: uint_t,
                          arg7: *const ::std::os::raw::c_void, arg8: size_t)
     -> ::std::os::raw::c_int;
    pub fn dtrace_print(arg1: *mut dtrace_hdl_t, arg2: *mut FILE,
                        arg3: *const ::std::os::raw::c_char, arg4: caddr_t,
                        arg5: size_t) -> ::std::os::raw::c_int;
    pub fn dtrace_work(arg1: *mut dtrace_hdl_t, arg2: *mut FILE,
                       arg3: dtrace_consume_probe_f,
                       arg4: dtrace_consume_rec_f,
                       arg5: *mut ::std::os::raw::c_void)
     -> dtrace_workstatus_t;
    pub fn dtrace_handle_err(arg1: *mut dtrace_hdl_t,
                             arg2: *mut dtrace_handle_err_f,
                             arg3: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn dtrace_handle_drop(arg1: *mut dtrace_hdl_t,
                              arg2: *mut dtrace_handle_drop_f,
                              arg3: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn dtrace_handle_proc(arg1: *mut dtrace_hdl_t,
                              arg2: *mut dtrace_handle_proc_f,
                              arg3: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn dtrace_handle_buffered(arg1: *mut dtrace_hdl_t,
                                  arg2: dtrace_handle_buffered_f,
                                  arg3: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn dtrace_handle_setopt(arg1: *mut dtrace_hdl_t,
                                arg2: *mut dtrace_handle_setopt_f,
                                arg3: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn dtrace_aggregate_clear(arg1: *mut dtrace_hdl_t);
    pub fn dtrace_aggregate_snap(arg1: *mut dtrace_hdl_t)
     -> ::std::os::raw::c_int;
    pub fn dtrace_aggregate_print(arg1: *mut dtrace_hdl_t, arg2: *mut FILE,
                                  arg3: *mut dtrace_aggregate_walk_f)
     -> ::std::os::raw::c_int;
    pub fn dtrace_aggregate_walk(arg1: *mut dtrace_hdl_t,
                                 arg2: *mut dtrace_aggregate_f,
                                 arg3: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn dtrace_aggregate_walk_joined(arg1: *mut dtrace_hdl_t,
                                        arg2: *mut dtrace_aggvarid_t,
                                        arg3: ::std::os::raw::c_int,
                                        arg4:
                                            *mut dtrace_aggregate_walk_joined_f,
                                        arg5: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn dtrace_aggregate_walk_sorted(arg1: *mut dtrace_hdl_t,
                                        arg2: *mut dtrace_aggregate_f,
                                        arg3: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn dtrace_aggregate_walk_keysorted(arg1: *mut dtrace_hdl_t,
                                           arg2: *mut dtrace_aggregate_f,
                                           arg3: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn dtrace_aggregate_walk_valsorted(arg1: *mut dtrace_hdl_t,
                                           arg2: *mut dtrace_aggregate_f,
                                           arg3: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn dtrace_aggregate_walk_keyvarsorted(arg1: *mut dtrace_hdl_t,
                                              arg2: *mut dtrace_aggregate_f,
                                              arg3:
                                                  *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn dtrace_aggregate_walk_valvarsorted(arg1: *mut dtrace_hdl_t,
                                              arg2: *mut dtrace_aggregate_f,
                                              arg3:
                                                  *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn dtrace_aggregate_walk_keyrevsorted(arg1: *mut dtrace_hdl_t,
                                              arg2: *mut dtrace_aggregate_f,
                                              arg3:
                                                  *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn dtrace_aggregate_walk_valrevsorted(arg1: *mut dtrace_hdl_t,
                                              arg2: *mut dtrace_aggregate_f,
                                              arg3:
                                                  *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn dtrace_aggregate_walk_keyvarrevsorted(arg1: *mut dtrace_hdl_t,
                                                 arg2:
                                                     *mut dtrace_aggregate_f,
                                                 arg3:
                                                     *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn dtrace_aggregate_walk_valvarrevsorted(arg1: *mut dtrace_hdl_t,
                                                 arg2:
                                                     *mut dtrace_aggregate_f,
                                                 arg3:
                                                     *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn dtrace_proc_create(arg1: *mut dtrace_hdl_t,
                              arg2: *const ::std::os::raw::c_char,
                              arg3: *const *mut ::std::os::raw::c_char,
                              arg4: *mut proc_child_func,
                              arg5: *mut ::std::os::raw::c_void)
     -> *mut ps_prochandle;
    pub fn dtrace_proc_grab(arg1: *mut dtrace_hdl_t, arg2: pid_t,
                            arg3: ::std::os::raw::c_int)
     -> *mut ps_prochandle;
    pub fn dtrace_proc_release(arg1: *mut dtrace_hdl_t,
                               arg2: *mut ps_prochandle);
    pub fn dtrace_proc_continue(arg1: *mut dtrace_hdl_t,
                                arg2: *mut ps_prochandle);
    pub fn dtrace_object_iter(arg1: *mut dtrace_hdl_t,
                              arg2: *mut dtrace_obj_f,
                              arg3: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn dtrace_object_info(arg1: *mut dtrace_hdl_t,
                              arg2: *const ::std::os::raw::c_char,
                              arg3: *mut dtrace_objinfo_t)
     -> ::std::os::raw::c_int;
    pub fn dtrace_lookup_by_name(arg1: *mut dtrace_hdl_t,
                                 arg2: *const ::std::os::raw::c_char,
                                 arg3: *const ::std::os::raw::c_char,
                                 arg4: *mut GElf_Sym,
                                 arg5: *mut dtrace_syminfo_t)
     -> ::std::os::raw::c_int;
    pub fn dtrace_lookup_by_addr(arg1: *mut dtrace_hdl_t, addr: GElf_Addr,
                                 arg2: *mut GElf_Sym,
                                 arg3: *mut dtrace_syminfo_t)
     -> ::std::os::raw::c_int;
    pub fn dtrace_lookup_by_type(arg1: *mut dtrace_hdl_t,
                                 arg2: *const ::std::os::raw::c_char,
                                 arg3: *const ::std::os::raw::c_char,
                                 arg4: *mut dtrace_typeinfo_t)
     -> ::std::os::raw::c_int;
    pub fn dtrace_symbol_type(arg1: *mut dtrace_hdl_t, arg2: *const GElf_Sym,
                              arg3: *const dtrace_syminfo_t,
                              arg4: *mut dtrace_typeinfo_t)
     -> ::std::os::raw::c_int;
    pub fn dtrace_type_strcompile(arg1: *mut dtrace_hdl_t,
                                  arg2: *const ::std::os::raw::c_char,
                                  arg3: *mut dtrace_typeinfo_t)
     -> ::std::os::raw::c_int;
    pub fn dtrace_type_fcompile(arg1: *mut dtrace_hdl_t, arg2: *mut FILE,
                                arg3: *mut dtrace_typeinfo_t)
     -> ::std::os::raw::c_int;
    pub fn dtrace_probe_iter(arg1: *mut dtrace_hdl_t,
                             pdp: *const dtrace_probedesc_t,
                             arg2: *mut dtrace_probe_f,
                             arg3: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn dtrace_probe_info(arg1: *mut dtrace_hdl_t,
                             arg2: *const dtrace_probedesc_t,
                             arg3: *mut dtrace_probeinfo_t)
     -> ::std::os::raw::c_int;
    pub fn dtrace_addr2str(arg1: *mut dtrace_hdl_t, arg2: uint64_t,
                           arg3: *mut ::std::os::raw::c_char,
                           arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn dtrace_uaddr2str(arg1: *mut dtrace_hdl_t, arg2: pid_t,
                            arg3: uint64_t, arg4: *mut ::std::os::raw::c_char,
                            arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn dtrace_xstr2desc(arg1: *mut dtrace_hdl_t, arg2: dtrace_probespec_t,
                            arg3: *const ::std::os::raw::c_char,
                            arg4: ::std::os::raw::c_int,
                            arg5: *mut *mut ::std::os::raw::c_char,
                            arg6: *mut dtrace_probedesc_t)
     -> ::std::os::raw::c_int;
    pub fn dtrace_str2desc(arg1: *mut dtrace_hdl_t, arg2: dtrace_probespec_t,
                           arg3: *const ::std::os::raw::c_char,
                           arg4: *mut dtrace_probedesc_t)
     -> ::std::os::raw::c_int;
    pub fn dtrace_id2desc(arg1: *mut dtrace_hdl_t, arg2: dtrace_id_t,
                          arg3: *mut dtrace_probedesc_t)
     -> ::std::os::raw::c_int;
    pub fn dtrace_desc2str(arg1: *const dtrace_probedesc_t,
                           arg2: *mut ::std::os::raw::c_char, arg3: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn dtrace_attr2str(arg1: dtrace_attribute_t,
                           arg2: *mut ::std::os::raw::c_char, arg3: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn dtrace_str2attr(arg1: *const ::std::os::raw::c_char,
                           arg2: *mut dtrace_attribute_t)
     -> ::std::os::raw::c_int;
    pub fn dtrace_stability_name(arg1: dtrace_stability_t)
     -> *const ::std::os::raw::c_char;
    pub fn dtrace_class_name(arg1: dtrace_class_t)
     -> *const ::std::os::raw::c_char;
    pub fn dtrace_provider_modules(arg1: *mut dtrace_hdl_t,
                                   arg2: *mut *const ::std::os::raw::c_char,
                                   arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
